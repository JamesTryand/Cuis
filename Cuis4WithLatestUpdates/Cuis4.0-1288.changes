'From Cuis 4.0 of 21 April 2012 [latest update: #1260] on 21 April 2012 at 12:41:42 pm'!


	Smalltalk condenseSources!

Clipboard default: Clipboard new!

Transcript clear!

Clipboard default: Clipboard new!

Smalltalk flushClassNameCache.!

DebuggerMethodMap voidMapCache.!

Smalltalk garbageCollect.!

Smalltalk garbageCollect.!

Smalltalk garbageCollect.!

----SNAPSHOT----#(21 April 2012 12:42:58 pm) Cuis4.0.image priorSource: 0!

----QUIT----#(21 April 2012 12:43:04 pm) Cuis4.0.image priorSource: 358!

----STARTUP----#(17 May 2012 9:36:53 pm) as /Volumes/CANON_DC/Cuis/Cuis4.0-1260/Cuis4.0.image!


'From Cuis 4.0 of 21 April 2012 [latest update: #1260] on 25 April 2012 at 10:29:12 am'!

!classDefinition: #ChangeSet category: #'Tools-Changes'!
Object subclass: #ChangeSet
	instanceVariableNames: 'name preamble postscript changeRecords structures superclasses isForBaseSystem hasUnsavedChanges'
	classVariableNames: 'CurrentBaseCSNumber Installing'
	poolDictionaries: ''
	category: 'Tools-Changes'!

Object subclass: #ChangeSet
	instanceVariableNames: 'name preamble postscript changeRecords structures superclasses isForBaseSystem hasUnsavedChanges '
	classVariableNames: 'CurrentBaseCSNumber Installing '
	poolDictionaries: ''
	category: 'Tools-Changes'!
!ChangeSet methodsFor: 'accessing' stamp: 'jmv 4/25/2012 09:46'!
            hasUnsavedChanges

	^hasUnsavedChanges! !
!ChangeSet methodsFor: 'accessing' stamp: 'jmv 4/25/2012 09:46'!
                     hasUnsavedChanges: aBoolean

	hasUnsavedChanges _ aBoolean.
	self triggerEvent: #dirtyFlagChanged! !
!ChangeSet methodsFor: 'accessing' stamp: 'jmv 4/25/2012 10:18'!
                          isForBaseSystem: aBoolean

	isForBaseSystem _ aBoolean! !
!ChangeSorter class methodsFor: 'enumerating' stamp: 'jmv 4/25/2012 10:24'!
                          existingOrNewChangeSetNamed: aName forBaseSystem: aBoolean

	| newSet |

	^(self changeSetNamed: aName)
		ifNotNil: [ :existing |
			existing assert: existing isForBaseSystem = aBoolean ]
		ifNil: [
			newSet _ ChangeSet basicNewNamed: aName.
			newSet isForBaseSystem: aBoolean.
			AllChangeSets add: newSet.
			newSet ]! !
!CodePackage class methodsFor: 'packages access' stamp: 'jmv 4/25/2012 09:34'!
            named: aString createIfAbsent: neverAnswerNil registerIfNew: doRegisterIfJustCreated
	"Answer the instance with name aString.
	If there's no package named aString, answer nil or a new instance as requested.
	If a new instance is created, register it or not as requested.
	CodePackage named: 'Morphic' createIfAbsent: false registerIfNew: false
	CodePackage named: 'Morphic' createIfAbsent: true registerIfNew: false
	CodePackage named: 'XXXXXTest' createIfAbsent: true registerIfNew: true
	"

	| answer newInstance |
	answer _ InstalledPackages
		at: aString
		ifAbsent: [
			neverAnswerNil ifTrue: [ 
				newInstance _ self new packageName: aString.
				doRegisterIfJustCreated ifTrue: [ self register: newInstance ].
				newInstance ]].
	^ answer! !
!ChangeSet methodsFor: 'initialize-release' stamp: 'jmv 4/25/2012 10:24' prior: 16799784!
                      clear 
	"Reset the receiver to be empty.  "

	changeRecords _ Dictionary new.
	preamble _ nil.
	postscript _ nil.
	self hasUnsavedChanges: false.
	self isForBaseSystem: true 	"Not a great default, but at least some Boolean"! !
!ChangeSet methodsFor: 'change logging' stamp: 'jmv 4/25/2012 09:50' prior: 16799811!
       noteAddClass: class
	"Include indication that a new class was created."

	class wantsChangeSetLogging ifFalse: [^ self].
	self atClass: class add: #new.
	self atClass: class add: #change.
	self addCoherency: class name.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'change logging' stamp: 'jmv 4/25/2012 09:52' prior: 16799821!
             noteChangeClass: class from: oldClass
	"Remember that a class definition has been changed.  Record the original structure, so that a conversion method can be built."

	class wantsChangeSetLogging ifFalse: [^ self].
	class isMeta 
		ifFalse: [self atClass: class add: #change]	"normal"
		ifTrue: [((self classChangeAt: class theNonMetaClass name) includes: #add) 
			ifTrue: [self atClass: class add: #add] 	"When a class is defined, the metaclass
				is not recorded, even though it was added.  A further change is
				really just part of the original add."
			ifFalse: [self atClass: class add: #change]].
	self addCoherency: class name.
	(self changeRecorderFor: class) notePriorDefinition: oldClass.
	self noteClassStructure: oldClass.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'change logging' stamp: 'jmv 4/25/2012 09:56' prior: 16799847!
      noteClassMoveToOtherPackage: class
	"The class is about to be moved to some other package, who will hold it.
	Adjust the receiver to reflect that fact."

	class wantsChangeSetLogging ifFalse: [^ self].
	self atClass: class add: #movedToOtherPackage.
	changeRecords removeKey: class class name ifAbsent: nil.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'change logging' stamp: 'jmv 4/25/2012 09:56' prior: 16799859!
                     noteMethodMoveToOtherPackage: selector forClass: class

	class wantsChangeSetLogging ifFalse: [^ self].
	(self changeRecorderFor: class)
		noteMethodMoveToOtherPackage: selector.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'change logging' stamp: 'jmv 4/25/2012 09:54' prior: 16799867!
                      noteNewMethod: newMethod forClass: class selector: selector priorMethod: methodOrNil

	class wantsChangeSetLogging ifFalse: [^ self].
	(self changeRecorderFor: class)
		noteNewMethod: newMethod selector: selector priorMethod: methodOrNil.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'change logging' stamp: 'jmv 4/25/2012 10:10' prior: 16799877!
                          noteRemoveSelector: selector class: class priorMethod: priorMethod lastMethodInfo: info
	"Include indication that a method has been forgotten.
	info is a pair of the source code pointer and message category
	for the method that was removed."

	class wantsChangeSetLogging ifFalse: [^ self].
	(self changeRecorderFor: class)
		noteRemoveSelector: selector priorMethod: priorMethod lastMethodInfo: info.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'change logging' stamp: 'jmv 4/25/2012 09:54' prior: 16799892!
                       noteRenameClass: class as: newName 
	"Include indication that a class has been renamed."

	| recorder |
	(recorder _ self changeRecorderFor: class)
		noteChangeType: #rename;
		noteNewName: newName asSymbol.
		
	"store under new name (metaclass too)"
	changeRecords at: newName put: recorder.
	changeRecords removeKey: class name.
	self noteClassStructure: class.

	recorder _ changeRecords at: class class name ifAbsent: [nil].
	recorder ifNotNil: [
		changeRecords at: (newName, ' class') put: recorder.
		changeRecords removeKey: class class name.
		recorder noteNewName: newName , ' class' ].

	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'accessing' stamp: 'jmv 4/25/2012 10:18' prior: 16800026!
                        isForBaseSystem

	^isForBaseSystem! !
!ChangeSet methodsFor: 'method changes' stamp: 'jmv 4/25/2012 10:07' prior: 16800128!
    removeSelectorChanges: selector class: class 
	"Remove all memory of changes associated with the argument, selector, in 
	this class."

	| chgRecord |
	(chgRecord _ changeRecords at: class name ifAbsent: [^ self])
		removeSelector: selector.
	chgRecord hasNoChanges ifTrue: [changeRecords removeKey: class name].
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'class changes' stamp: 'jmv 4/25/2012 09:56' prior: 16800245!
                 noteClassForgotten: className
	"Remove from structures if class is not a superclass of some other one we are remembering"

	structures ifNil: [^ self].
	Smalltalk at: className ifPresent: [:cls |
		cls subclasses do: [:sub | (structures includesKey: sub) ifTrue: [
			^ self]]].  "No delete"
	structures removeKey: className ifAbsent: nil.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'class changes' stamp: 'jmv 4/25/2012 09:51' prior: 16800290!
                      noteCommentClass: class 
	"Include indication that a class comment has been changed."

	class wantsChangeSetLogging ifFalse: [^ self].
	self atClass: class add: #comment.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'class changes' stamp: 'jmv 4/25/2012 09:52' prior: 16800298!
                               noteRemovalOf: class
	"The class is about to be removed from the system.
	Adjust the receiver to reflect that fact."

	class wantsChangeSetLogging ifFalse: [^ self].
	(self changeRecorderFor: class)
		noteChangeType: #remove fromClass: class.
	changeRecords removeKey: class class name ifAbsent: nil.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'class changes' stamp: 'jmv 4/25/2012 09:54' prior: 16800310!
                             noteReorganizeClass: class 
	"Include indication that a class was reorganized."

	self atClass: class add: #reorganize.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 4/25/2012 10:01' prior: 16800575!
                     assurePreambleExists
	"Make sure there is a TextModel holding the preamble; if it's found to have reverted to empty contents, put up the template"

	(preamble == nil or: [preamble actualContents isEmptyOrNil])
		ifTrue: [
			preamble _ TextModel withText: self preambleTemplate.	
			self hasUnsavedChanges: true ]! !
!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 4/25/2012 10:02' prior: 16800715!
                 fileOut
	"File out the receiver, to a file whose name is a function of the  
	change-set name and either of the date & time or chosen to have a  
	unique numeric tag, depending on the preference  
	'changeSetVersionNumbers'"
	| slips nameToUse |
	self checkForConversionMethods.
	nameToUse := Preferences changeSetVersionNumbers
				ifTrue: [self defaultChangeSetDirectory nextNameFor: self name coda: '-', Utilities authorInitials extension: 'cs']
				ifFalse: [(self name , FileDirectory dot , Utilities dateTimeSuffix , FileDirectory dot , 'cs') asFileName].
	Cursor write
		showWhile: [
			| file |
			file := self defaultChangeSetDirectory newFileNamed: nameToUse.
			[
				file timeStamp.
				self fileOutPreambleOn: file.
				self fileOutOn: file.
				self fileOutPostscriptOn: file]
					ensure: [file close]].
	
	self hasUnsavedChanges: false.
	Preferences checkForSlips
		ifFalse: [^ self].
	slips := self checkForSlips.
	(slips size > 0
			and: [(PopUpMenu withCaption: 'Methods in this fileOut have halts
or references to the Transcript
or other ''slips'' in them.
Would you like to browse them?' chooseFrom: 'Ignore\Browse slips')
					= 2])
		ifTrue: [Smalltalk browseMessageList: slips name: 'Possible slips in ' , name]! !
!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 4/25/2012 10:25' prior: 16800921!
                       objectForDataStream: refStrm
	"I am about to be written on an object file.  Write a path to me in the other system instead."

	"try to write reference for me"
	^ DiskProxy 
		global: #ChangeSorter
		selector: #existingOrNewChangeSetNamed:forBaseSystem:
		args: (Array with: self name with: self isForBaseSystem)
"===
	refStrm replace: self with: nil.
	^ nil
==="
! !
!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 4/25/2012 09:58' prior: 16800942!
                               postscriptString: aString

	postscript _ TextModel withText: aString.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'fileIn/Out' stamp: 'jmv 4/25/2012 09:58' prior: 16800954!
       preambleString: aString
	"Establish aString as the new contents of the preamble.  "

	preamble _ TextModel withText: aString.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'system change notifications' stamp: 'jmv 4/25/2012 09:52' prior: 16801090!
                              classRecategorized: aClass from: oldCategory to: newCategory

	"
	self hasUnsavedChanges: true
	"! !
!CodePackage methodsFor: 'saving' stamp: 'jmv 4/25/2012 09:41' prior: 16812828!
           save
	| nameToUse |
	fullFileName ifNil: [
		fullFileName _
			(ChangeSet defaultChangeSetDirectory pathName, FileDirectory slash, 
			self packageName, FileDirectory dot, 'pck')
				asFileName ].
	nameToUse _ fullFileName.
"	nameToUse _ Preferences changeSetVersionNumbers
		ifTrue: [
			ChangeSet defaultChangeSetDirectory
				nextNameFor: self packageName coda: '-', Utilities authorInitials
				extension: 'pck' ]
		ifFalse: [ (self packageName , FileDirectory dot , Utilities dateTimeSuffix , FileDirectory dot , 'pck') asFileName ]."
	Cursor write
		showWhile: [
			| file |
			file _ ChangeSet defaultChangeSetDirectory forceNewFileNamed: nameToUse.
			[
				file timeStamp.
				self writeOnStream: file ]
					ensure: [ file close ]].
	self hasUnsavedChanges: false.
	ChangeSorter removeChangeSet: (ChangeSet changeSetForPackage: self)! !
!CodePackage class methodsFor: 'packages access' stamp: 'jmv 4/25/2012 09:40' prior: 16812988!
                  register: aCodePackage
	"
	Usually call #named:createIfAbsent:registerIfNew: instead
	CodePackage register: (CodePackage newNamed: 'Tests-Files')
	"
	InstalledPackages at: aCodePackage packageName put: aCodePackage.
	self triggerEvent: #installedPackagesChanged! !
!CodePackageFile methodsFor: 'initialize' stamp: 'jmv 4/25/2012 09:35' prior: 16813067!
                               buildFileStream: aFileStream packageName: pkName fullName: fullFileName
	"Just build the PackageFile object. Don't install the code."

	| classesDefined classesExtended classesToDeleteButCant classesToReallyDelete packageInMemory |
	packageName _pkName.
	fullName _fullFileName.
	"Don't register a package!!"
	packageInMemory _ CodePackage
		named: packageName
		createIfAbsent: true
		registerIfNew: false.
	self buildFrom: aFileStream.
	"Compute stuff no longer in package: Should be removed from system."
	classesDefined _ Set new.
	classesExtended _ Set new.
	self classes do: [ :pseudoClass |
		pseudoClass hasDefinition
			ifTrue: [ classesDefined add: pseudoClass name ]
			ifFalse: [ classesExtended add: pseudoClass name ]].
	classesToRemove _ (packageInMemory classes asSet collect: [ :each | each name ]) difference: classesDefined.
	"Add here:
		- classes in classesToDelete, that #allCallsOn answers selectors that aren't in classesToDelete or methodsToRemove
		- classes with #subclasses that aren't in classesToDelete.
		- classes with existing instances (#instanceCount)? Not really sure... Maybe sole instance referenced from classVar or such...
		- something else I forgot?
	Warning: This search for stuff that can't be removed must be iterated again until it doesn't find any more."
	classesToDeleteButCant _ classesToRemove intersection: classesExtended.
	classesToReallyDelete _ classesToRemove difference: classesToDeleteButCant.
	"Methods. Could also mean classes that can't be deleted!! (include in the iteration)
	Warn if deleting last implementor of sent messages?"
	methodsToRemove _ packageInMemory methods asSet difference: self allMethodReferences.
	methodsToRemove _ methodsToRemove reject: [ :methodReference | classesToReallyDelete includes: methodReference classSymbol ].

"
	'=============' print.
	('classesToRemove: ', classesToRemove printString) print.
	('classesToDeleteButCant: ', classesToDeleteButCant printString) print.
	('classesToReallyDelete: ', classesToReallyDelete printString) print.
	'=============' print.
	'methodsToRemove: ' print.
	methodsToRemove do: [ :methodReference | methodReference print ].
	'=============' print.
"! !
!CodePackageListWindow methodsFor: 'commands' stamp: 'jmv 4/25/2012 09:36' prior: 16813537!
                            createPackage

	| pkName |
	pkName_ FillInTheBlank request: 'Name for new package?'.
	CodePackage
		named: pkName
		createIfAbsent: true
		registerIfNew: true! !
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 4/25/2012 10:11' prior: 16961957!
                              okayToDiscardUnsavedCodeSaving: wouldSave
	"Answer true unless the user cancels quitting because of some warning given.
	Smalltalk okayToDiscardUnsavedCodeSaving: true
	Smalltalk okayToDiscardUnsavedCodeSaving: false
	"

	| baseCSdirty dirtyPackages |
	baseCSdirty _ ChangeSorter allChangeSets anySatisfy: [ :any | any isForBaseSystem and: [ any isEmpty hasUnsavedChanges ]].
	dirtyPackages _ CodePackage installedPackages anySatisfy: [ :pck | pck hasUnsavedChanges ].

	baseCSdirty & dirtyPackages ifTrue: [
		wouldSave ifTrue: [
			^self confirm: 'There are both unsaved Packages', String newLineString,
				'      (would need to be saved on next run), ', String newLineString,
				'and unsaved Changes to Cuis core', String newLineString,
				'      (they would be lost as a separate ChangeSet).', String newLineString,
				'Continue?' ]
		ifFalse: [
			^self confirm: 'There are both unsaved Packages', String newLineString,
				'and unsaved Changes to Cuis core.', String newLineString,
				'If you continue, they will all be lost.', String newLineString,
				'Continue?' ]].

	baseCSdirty ifTrue: [
		^self confirm: 'Some ChangeSet for Cuis core might have unsaved changes.', String newLineString,
			'If you continue, they would be lost.', String newLineString,
			'Continue?' ].

	dirtyPackages ifTrue: [
		wouldSave ifTrue: [
			^self confirm: 'There are unsaved Packages.', String newLineString,
				'If you continue, they will need to be saved on next run.', String newLineString,
				'Continue?' ]
		ifFalse: [
			^self confirm: 'There are unsaved Packages.', String newLineString,
				'If you continue, they will all be lost.', String newLineString,
				'Continue?' ]].

	^true! !

!classDefinition: #ChangeSet category: #'Tools-Changes'!
Object subclass: #ChangeSet
	instanceVariableNames: 'name preamble postscript changeRecords structures superclasses hasUnsavedChanges isForBaseSystem'
	classVariableNames: 'CurrentBaseCSNumber Installing'
	poolDictionaries: ''
	category: 'Tools-Changes'!

Object subclass: #ChangeSet
	instanceVariableNames: 'name preamble postscript changeRecords structures superclasses hasUnsavedChanges isForBaseSystem'
	classVariableNames: 'CurrentBaseCSNumber Installing'
	poolDictionaries: ''
	category: 'Tools-Changes'!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."
| name |
ChangeSet allInstancesDo: [ :each |
	each hasUnsavedChanges: each isEmpty not.
	name _ each name.
	each isForBaseSystem: ((name at: 1) isDigit
		and: [ (name at: 1) isDigit
			and: [ (name at: 1) isDigit
				and: [ (name at: 1) isDigit
					and: [ name is: '-CuisCore-' substingAt: 5 ]]]])]!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1261-CuisCore-JuanVuletich-2012Apr25-09h17m-jmv.9.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1261] on 25 April 2012 at 9:58:57 pm'!
!ChangeSet class methodsFor: 'change set to use' stamp: 'jmv 4/25/2012 10:26' prior: 16801492!
                             changeSetForBaseSystem

	| csName numberToUse |
	Installing

		ifNil: [
			numberToUse _ self currentBaseCSNumber.
			ChangeSorter allChangeSets
				detect: [ :any | any name initialIntegerOrNil = numberToUse ]
				ifFound: [ :existing | ^existing ]
				ifNone: [
					csName _ (self baseSystemNameFor: numberToUse),
						(String streamContents: [ :strm | DateAndTime now filenamishPrintOn: strm ]).
					^ChangeSorter existingOrNewChangeSetNamed: csName forBaseSystem: true ]]

		ifNotNil: [
			csName _ 'Affects-BaseSystem--Install-', Installing.
			^ChangeSorter existingOrNewChangeSetNamed: csName forBaseSystem: false
			"Changes are for the base system, but are not user's own changes..." ]! !
!ChangeSet class methodsFor: 'change set to use' stamp: 'jmv 4/25/2012 10:25' prior: 16801513!
    changeSetForPackage: aCodePackage

	| csName |
	aCodePackage ifNil: [
		^self changeSetForBaseSystem ].
	csName _ Installing
		ifNil: [ 'UnsavedChangesTo-', aCodePackage name ]
		ifNotNil: [
			Installing = aCodePackage packageName
				ifTrue: [ 'Install-', Installing ]
				ifFalse: [ 'Affects-', aCodePackage name, '--Install-', Installing ]].
	^ChangeSorter existingOrNewChangeSetNamed: csName forBaseSystem: false! !
!CodeFileBrowserWindow class methodsFor: 'services' stamp: 'jmv 4/25/2012 09:37' prior: 16812113!
                         installPackageStream: aStream

	| fullName pkName existing |
	fullName _ aStream name.
	pkName _ CodePackageFile packageNameFrom: fullName.
	existing _ CodePackage named: pkName createIfAbsent: false registerIfNew: false.
	(existing isNil
		or: [ existing hasUnsavedChanges not
			or: [ self confirm: 'If you install this package, there are unsaved changes that will be lost.', String newLineString, 'Continue?' ]]) ifTrue: [
		Cursor wait showWhile: [
			CodePackageFile
				installFileStream: aStream
				packageName: pkName
				fullName: fullName ]]! !
!CodePackageFile methodsFor: 'services' stamp: 'jmv 4/25/2012 09:36' prior: 16813151!
                              install: aFileStream
	"Installs the package. Replace all existing code in the PackageInfo, removing any code that is not included in us."
	| localName newCodePackage |

	"Give reasonable warnings if there is stuff that can't be properly cleaned. Give the user the chance to abort."
	'=============' print.
	classesToRemove notEmpty ifTrue: [
		('classesToRemove: ', classesToRemove printString) print.
		'=============' print ].
	methodsToRemove notEmpty ifTrue: [
		'methodsToRemove: ' print.
		methodsToRemove do: [ :methodReference | methodReference print ].
		'=============' print ].
	
	"Tirar warning si hay que borrar cosas que no se puede, si hay referencias, etc. Quizas si vamos a borrar el ultimo implementor de un mensaje enviado?"

	"Crear, instalar y devolver una instancia de PackageInfo"
	newCodePackage_ CodePackage
		named: packageName
		createIfAbsent: true
		registerIfNew: true.
	newCodePackage
		fullFileName: fullName;
		sourceSystem: sourceSystem;
		description: description.

	"Esto crea el change set y carga ahi. OJO. En ese CS, hay que borrar todo lo que hay que borrar"
	"These were created in #fromFileStream: ... reuse?"
	localName _ FileDirectory localNameFor: fullName.
	ChangeSet installing: newCodePackage packageName do: [
		aFileStream fileInAnnouncing: 'Installing ', localName, '...'.
		methodsToRemove do: [ :methodReference | methodReference actualClass removeSelector: methodReference selector ].
		classesToRemove do: [ :className | (Smalltalk at: className) removeFromSystem ]].
	newCodePackage hasUnsavedChanges: false.
	Transcript newLine; show: 'Package ', packageName, ' successfully installed'; newLine.
	
	"Tirar undeclared al transcript. warning si quedaron undeclared
	Es feo que tire an transcript undeclareds que despues no lo son..."
	Smalltalk cleanOutUndeclared.
	Undeclared notEmpty ifTrue: [
		('Undeclared: ', Undeclared printString) print ].

	"Descartar la instancia de CodePackageFile"
	^newCodePackage! !

CodePackage class removeSelector: #named:!

CodePackage class removeSelector: #named:!

CodePackage class removeSelector: #newNamed:!

CodePackage class removeSelector: #newNamed:!

CodePackage removeSelector: #register!

CodePackage removeSelector: #register!

ChangeSorter class removeSelector: #existingOrNewChangeSetNamed:!

ChangeSorter class removeSelector: #existingOrNewChangeSetNamed:!

"Postscript:
Leave the line above, and replace the rest of this comment by a useful one.
Executable statements should follow this comment, and should
be separated by periods, with no exclamation points (!!).
Be sure to put any further comments in double-quotes, like this one."

| name |
ChangeSet allInstancesDo: [ :each |
	each hasUnsavedChanges: each isEmpty not.
	name _ each name.
	each isForBaseSystem: ((name at: 1) isDigit
		and: [ (name at: 1) isDigit
			and: [ (name at: 1) isDigit
				and: [ (name at: 1) isDigit
					and: [ name is: '-CuisCore-' substingAt: 5 ]]]])]!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1262-CuisCore-JuanVuletich-2012Apr25-21h56m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1260] on 23 April 2012 at 11:21:55 pm'!
!CodePackage methodsFor: 'saving' stamp: 'JMG 4/23/2012 23:21' prior: 50332025!
    save
	| nameToUse |
	fullFileName ifNil: [
		fullFileName _
			ChangeSet defaultChangeSetDirectory fullNameFor: (self packageName, FileDirectory dot, 'pck')].
	nameToUse _ fullFileName.
"	nameToUse _ Preferences changeSetVersionNumbers
		ifTrue: [
			ChangeSet defaultChangeSetDirectory
				nextNameFor: self packageName coda: '-', Utilities authorInitials
				extension: 'pck' ]
		ifFalse: [ (self packageName , FileDirectory dot , Utilities dateTimeSuffix , FileDirectory dot , 'pck') asFileName ]."
	Cursor write
		showWhile: [
			| file |
			file _ ChangeSet defaultChangeSetDirectory forceNewFileNamed: nameToUse.
			[
				file timeStamp.
				self writeOnStream: file ]
					ensure: [ file close ]].
	self hasUnsavedChanges: false.
	ChangeSorter removeChangeSet: (ChangeSet changeSetForPackage: self)! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1263-CuisCore-JeffGonis-2012Apr23-23h19m-JMG.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1262] on 25 April 2012 at 10:52:28 am'!
!TextProvider methodsFor: 'testing' stamp: 'jmv 4/25/2012 10:50'!
              refusesToAccept
	"This method must answer false if we usually accept text from a PluggableTextModel (i.e. we understand its textSetter), but are not accepting text right now."

	^ false! !
!PluggableTextModel methodsFor: 'testing' stamp: 'jmv 4/25/2012 10:52' prior: 16915463!
           wantsFrameAdornments

	^textSetter notNil! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1264-CuisCore-JuanVuletich-2012Apr25-10h29m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1262] on 25 April 2012 at 11:01:04 am'!
!SocketStream commentStamp: '<historical>' prior: 16946165!
             SocketStream is a wrapper for class Socket making it easy to write networking code by giving the programmer a stream-like protocol. A Socket is a two way communication link with two logically separate channels - input and output. The Socket class is the lowest level in Squeak for network communication and using it directly can be difficult and bug prone.

A SocketStream can be in binary or ascii mode, ascii is the default which means you are transmitting and receiving Strings. Most Internet protocols are in clear text ascii, like for example HTTP. Another setting is what timeout you want to use - default is the standardTimeout from Socket. More settings can be found in the method category 'configuration'.

Simplest example of connecting, sending/receiving and closing:

| stream result |
stream := SocketStream openConnectionToHostNamed: 'www.squeak.org' port: 80.
[[stream nextPutAll: 'GET / HTTP/1.0'; newLine; newLine; flush.
result := stream upToEnd. "Give us all data until the socket is closed."
Transcript show: result withCuisLineEndings; newLine.]
	ensure: [stream close]]
		on: ConnectionTimedOut
		do: [:ex | Transcript show: ex asString; newLine. ex resume]

There are two important things to note above:
	- The methods in category "stream in" can signal two exceptions (unless turned off with #shouldSignal:):
		ConnectionClosed and ConnectionTimedOut
	- We close the stream using #ensure:, that is to make sure it isn't left opened.
	- We use #on:do: to catch any signal. In this case we do not need to catch ConnectionClosed since #upToEnd does that for us intrinsically.

----------------
SocketStream (below called SS) is a reimplementation of 'Old'-SocketStream (below called OSS) - the class that originates from the original Comanche implementation but now is included in standard Squeak. SS has the same protocol as OSS and is meant to replace it. SS is faster, more flexible, is better documented and adds a few features:

1. #shouldSignal:, which decides if SS should signal low level Socket exceptions (true) or if it should swallow them like original OSS did. Default is true. The only reason I added this is for backwards compatibility - not signalling causes problems - see bug 4 below.

2. #nextAllInBuffer, #nextInBuffer:, #skip:, #receiveData:, #nextPutAllFlush: and #recentlyRead are new additions to the public protocol.


It also fixes various bugs:

1. #isDataAvailable could theoretically answer false, when there actually is some in the buffer in OSS. If #receiveDataIfAvailable reads the last byte then the following "socket dataAvailable" would answer false. So the last byte would be sitting in the inStream missed.

2. #upToAll: in OSS has several problems, for example - #positionOfSubCollection:ifAbsent: which was introduced answers one position too low. This was compensated in upToAll:, but only in the pushBack: call, not the actual result being returned which was cut short 1 byte. Amusingly this makes KomHttpServer not use "Keep-Alive" since the last $e in 'Alive' was cut short. :)

3. SS doesn't inherit from PositionableStream since that just breaks various inherited messages, like for example #skip:. OSS should IMHO be changed to inherit from Object - or of course, replaced in full with SS. :)

4. Since SocketStream by default signals closes and timeouts the SocketStreamTest now passes. The reason for SocketStream to fail is that while it does timeout on a low level (#SocketStream>>receiveData doesn't hang forever) - the callers of #receiveData sometimes loop - like in #next:, and thus eliminates the timeout. SS warns about some methods (in their method comments) not honouring timeouts if shouldSignal is false, I really don't know what they should do in that case:
	#next:, #upTo:, #upToAll: and #upToEnd (and #receiveData:)


The primary reason for the SS implementation is optimal performance. The main differences in implementation with the old OSS are:

1. SS uses two buffers directly (inBuffer and outBuffer) with pointers marking start and stop within the buffer. OSS instead uses two regular streams, a ReadStream and a WriteStream. Using internal buffers makes it possible to avoid copying and reallocation in various ways, it also makes SS be able to have specialized growing/buffer moving behaviour.

2. #upTo:, #upToAll: and #peekForAll: uses selectged String messages that in turn uses fast primitives for searching. OSS used other messages that fell back on byte per byte reading.

3. #receiveData in OSS creates a temporary buffer stream for each call!! During a long read operation, like say #upToAll: (which for example is used when uploading files using HTTP POST forms), this is devastating - especially since the default size is only 2000 bytes - and leads to a very high number of low level read operations on the Socket, typically 100 times more calls than with OSS. The buffer in OSS is held in an instvar (not recreated for each call), is larger from the start and above all - grows dynamically by doubling. OSS can also avoid a grow/reallocation by doing a "move down" if data has been read from the SS as it comes in and through that making room in the lower part of the inBuffer. The net result is that upToAll: for large files is about 10 times faster.

4. The implementation of upTo: and upToAll: tries to avoid doing unnecessary find operations in the buffer and is greedy by default, which means it favors reading more data - if available - before searching for the stop sequence. If we had #findString:startingAt:stoppingAt: this wouldn't have to be greedy and we wouldn't be needlessly scanning dead buffer area. VM hackers? Also, while you are at it - make it work for ByteArrays too. :)


SS can not be run unbuffered, since that seems unneeded. The option to autoFlush is still available, with it set to true SocketStream (just like OSS) will flush on its own on each nextPut:/nextPutAll:, otherwise flushing it will have to be done manually but is done on close.

The first performance tests shows that, as noted above, receiving large amounts of data using #upToAll: is greatly improved - factor of 10. Serving HTTP with small payloads seemed at first not be faster at all - but this is due to the high overhead of Socket connect/close and other things. Increasing payloads show a difference and especially with keep alive on - where the new SS roughly doubles the throughput!!!
!String methodsFor: 'converting' stamp: 'jmv 4/25/2012 10:59' prior: 16956235!
                         withCuisLineEndings
	"assume the string is textual, and that CR, LF, and CRLF are all 
	valid line endings.  Replace each occurence with a single Lf
	('aLine', String crlfString, 'anotherOne') withCuisLineEndings
	"

	^ self withLineEndings: String newLineString! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1265-CuisCore-JuanVuletich-2012Apr25-10h52m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1262] on 25 April 2012 at 11:22:21 am'!
!CodeProvider methodsFor: 'testing' stamp: 'jmv 4/25/2012 11:20'!
          isRefusingToAccept
	"Answer whether receiver, given its current contentsSymbol, could accept code happily if asked to"

	^ (#(byteCodes documentation) includes: self contentsSymbol)! !
!PluggableTextModel methodsFor: 'testing' stamp: 'jmv 4/25/2012 11:18' prior: 16915459!
               refusesToAccept
	^textProvider is: #refusingToAccept! !
!CodeProvider methodsFor: 'testing' stamp: 'jmv 4/25/2012 11:20' prior: 16814766!
                      is: aSymbol
	aSymbol = #refusingToAccept
		ifTrue: [ ^self isRefusingToAccept ].
	^(#(CodeProvider #ShoutEnabled) pointsTo: aSymbol)
		or: [ super is: aSymbol ]! !

CodeProvider removeSelector: #refusesToAccept!

CodeProvider removeSelector: #refusesToAccept!

TextProvider removeSelector: #refusesToAccept!

TextProvider removeSelector: #refusesToAccept!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1266-CuisCore-JuanVuletich-2012Apr25-11h11m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1262] on 25 April 2012 at 11:49:14 am'!
!SystemDictionary methodsFor: 'snapshot and quit' stamp: 'jmv 4/25/2012 11:49' prior: 50332148!
                  okayToDiscardUnsavedCodeSaving: wouldSave
	"Answer true unless the user cancels quitting because of some warning given.
	Smalltalk okayToDiscardUnsavedCodeSaving: true
	Smalltalk okayToDiscardUnsavedCodeSaving: false
	"

	| baseCSdirty dirtyPackages |
	baseCSdirty _ ChangeSorter allChangeSets anySatisfy: [ :any | any isForBaseSystem and: [ any hasUnsavedChanges ]].
	dirtyPackages _ CodePackage installedPackages anySatisfy: [ :pck | pck hasUnsavedChanges ].

	baseCSdirty & dirtyPackages ifTrue: [
		wouldSave ifTrue: [
			^self confirm: 'There are both unsaved Packages', String newLineString,
				'      (would need to be saved on next run), ', String newLineString,
				'and unsaved Changes to Cuis core', String newLineString,
				'      (they would be lost as a separate ChangeSet).', String newLineString,
				'Continue?' ]
		ifFalse: [
			^self confirm: 'There are both unsaved Packages', String newLineString,
				'and unsaved Changes to Cuis core.', String newLineString,
				'If you continue, they will all be lost.', String newLineString,
				'Continue?' ]].

	baseCSdirty ifTrue: [
		^self confirm: 'Some ChangeSet for Cuis core might have unsaved changes.', String newLineString,
			'If you continue, they would be lost.', String newLineString,
			'Continue?' ].

	dirtyPackages ifTrue: [
		wouldSave ifTrue: [
			^self confirm: 'There are unsaved Packages.', String newLineString,
				'If you continue, they will need to be saved on next run.', String newLineString,
				'Continue?' ]
		ifFalse: [
			^self confirm: 'There are unsaved Packages.', String newLineString,
				'If you continue, they will all be lost.', String newLineString,
				'Continue?' ]].

	^true! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1267-CuisCore-JuanVuletich-2012Apr25-11h22m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1267] on 28 April 2012 at 11:38:12 am'!
!MenuMorph methodsFor: 'accessing' stamp: 'jmv 4/28/2012 11:34'!
                               popUpOwner
	^popUpOwner! !
!SystemWindow methodsFor: 'drawing' stamp: 'jmv 4/27/2012 16:37'!
   makeMeFullyVisible 

	self world extent > (0@0) ifFalse: [^ self].

	(self position >= (0@0) and: [ self position < (self world extent-self extent)]) ifTrue: [
		^ self "OK -- visible"].

	"window not on screen (probably due to reframe) -- move it now"
	self isCollapsed
		ifTrue: [self position: (RealEstateAgent assignCollapsePointFor: self)]
		ifFalse: [self position: (RealEstateAgent initialFrameFor: self initialExtent: bounds extent world: self world) topLeft].

! !
!MenuItemMorph methodsFor: 'events' stamp: 'jmv 4/28/2012 11:38' prior: 16886998!
                    mouseEnter: evt
	"The mouse entered the receiver"
	owner popUpOwner ifNotNil: [ :parentItem |
		parentItem removeAlarm: #deselectTimeOut: ].
	owner ifNil: [ ^self ].
	owner selectItem: self event: evt! !
!PasteUpMorph methodsFor: 'world menu' stamp: 'jmv 4/27/2012 16:38' prior: 16912138!
                               bringWindowsFullOnscreen
	"Make ever SystemWindow on the desktop be totally on-screen, whenever possible."
	
	(SystemWindow windowsIn: self satisfying: [:w | true]) do: [ :each |
		each makeMeFullyVisible ]! !

MenuMorph removeSelector: #staysUp!

MenuMorph removeSelector: #staysUp!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1268-CuisCore-JuanVuletich-2012Apr28-11h36m-jmv.2.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1267] on 30 April 2012 at 12:10:30 am'!
!CodePackage commentStamp: 'jmv 4/30/2012 00:03' prior: 16812140!
                        A CodePackage is a package that is currently loaded in the system. If saved (.pck), then it is stored in a file that can be dealt with as an instance of PackageFile. As the code is already in the system, all we need to know is the packageName. Implementation is originally based on PackageInfo, but has diverged.

CodePackage instances are usually created when installing CodePackageFiles. These instances track the code for that package, that we'll need to save if we don't want to lose changes. These instances are held in the InstalledPackages class variable.

We can also create 'transient' instances with whatever name (and classes and extension methods) we chose, like
	(CodePackage named: 'Collections' createIfAbsent: true registerIfNew: false) inspect; save
This won't mean the system is actually partitioned in such way.

(CodePackage named: 'TestPackage' createIfAbsent: true registerIfNew: false) inspect; save!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1269-CuisCore-JuanVuletich-2012Apr30-00h01m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1269] on 30 April 2012 at 9:30:39 pm'!
!CodePackageFile class methodsFor: 'services' stamp: 'jmv 4/30/2012 21:29'!
               monticelloPackageNameFrom: fullName
	| localName |
	localName _ FileDirectory localNameFor: fullName.
	^(localName prefixAndSuffix: $-)
		ifNotNil: [ :ary | ary first ]
		ifNil: [ localName sansPeriodSuffix ].! !
!ChangeList class methodsFor: 'fileIn/Out' stamp: 'jmv 4/30/2012 21:29' prior: 16799128!
                  browseMCZContents: aStream
	"Browse the selected file."
	| unzipped changeList fullName packageFile pkName |
	
	"For Monticello packages we do as we do with our own .pck files: Instead of just browsing
	contents, also include what is no longer part of the package (and should therefore be removed on install)
	See #browsePackageContents:
	However, this was never tested to run!!"
	self flag: #jmvVer.

	fullName _ aStream name.
	pkName _ CodePackageFile monticelloPackageNameFrom: fullName.
	unzipped _ aStream asUnZippedStream: 'snapshot/source.st'.
	unzipped ascii.
	Cursor read showWhile: [
		changeList _ self new scanFile: unzipped from: 0 to: unzipped size.
		aStream reset.
		packageFile _ CodePackageFile
			buildFileStream: unzipped
			packageName: pkName
			fullName: fullName ].
	"Add deletions of methods and classes that are in the PackageInfo (i.e., active in the system)
	but are no longer in the PackageFile being viewed."
	packageFile methodsToRemove do: [ :methodReference |
		changeList
			addItem: (MethodDeletionChangeRecord new methodReference: methodReference)
			text: 'method no longer in package: ', methodReference asStringOrText ].
	packageFile classesToRemove do: [ :clsName |
		changeList
			addItem: (ClassDeletionChangeRecord new clsName: clsName)
			text: 'class no longer in package: ', clsName ].
	changeList clearSelections.
	ChangeListWindow open: changeList label: aStream name! !
!CodeFileBrowserWindow class methodsFor: 'services' stamp: 'jmv 4/30/2012 21:29' prior: 16812099!
                   installMonticelloPackageStream: aStream
	
	| stream fullName pkName |
	fullName _ aStream name.
	pkName _ CodePackageFile monticelloPackageNameFrom: fullName.
	stream _ aStream asUnZippedStream: 'snapshot/source.st'.
	stream ascii.
	Cursor wait showWhile: [
		CodePackageFile
			installFileStream: stream
			packageName: pkName
			fullName: fullName ]! !
!CodePackageFile class methodsFor: 'services' stamp: 'jmv 4/30/2012 21:30' prior: 16813274!
 packageNameFrom: fullName

	^(FileDirectory localNameFor: fullName) sansPeriodSuffix! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1270-CuisCore-JuanVuletich-2012Apr30-21h29m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1270] on 2 May 2012 at 6:42:19 pm'!
!TestRunner methodsFor: 'processing' stamp: 'gsa 5/2/2012 18:39'!
runProfiledTests
	| suite |
	Cursor execute showWhile: [
		suite _ TestSuite new name: 'TestRunner Suite'.
		self selectedTests do: [ :ea | self addTestsFor: ea toSuite: suite ].
		self runSuiteProfiled: suite.
	]
! !
!TestRunner methodsFor: 'processing' stamp: 'gsa 5/2/2012 18:40'!
    runSuiteProfiled: suite
	running ifNotNil: [ ^self inform: 'already running' ].
	suite addDependent: self.
	totalTests _ suite tests size.
	completedTests _ 0.
	runSemaphore initSignals.
	running _ [
            [ result _ MessageTally spyOn: [suite run] ]
	            ensure: [
		            running _ nil.
				suite removeDependent: self.
				runSemaphore signal.
				WorldState addDeferredUIMessage: [
					self updateWindow: result.
			      	self changed: #runTests.
			      	self changed: #runOneTest.
				].
	            ].
     ] newProcess.
	self runWindow.
      self changed: #runTests.
      self changed: #runOneTest.
      running
	      priority: Processor userBackgroundPriority;
	      resume.
! !
!TestRunnerWindow methodsFor: 'GUI building' stamp: 'gsa 5/2/2012 18:06'!
         buildRunProfiledButton
	| runProfiledButton |
	runProfiledButton := PluggableButtonMorph 
				model: model
				stateGetter: #runButtonState
				action: #runProfiledTests
				label: 'Run Profiled'.
	runProfiledButton
		color: self runButtonColor.
	^runProfiledButton! !
!TestRunnerWindow methodsFor: 'GUI building' stamp: 'gsa 5/2/2012 18:34' prior: 16969110!
                         buildUpperControls
	| refreshButton filterButton stopButton runOneButton runButton runProfiledButton row column1 column2 column3 theTestsList |

	refreshButton _ self buildRefreshButton.
	filterButton _ self buildFilterButton.
	stopButton _ self buildStopButton.
	column1 _ LayoutMorph newColumn.
	column1 addMorphs: { refreshButton . filterButton . stopButton }.

	theTestsList _ PluggableListMorphOfMany
				model: model
				listGetter: #tests
				primarySelectionGetter: #selectedSuite
				primarySelectionSetter: #selectedSuite:
				listSelectionGetter: #listSelectionAt:
				listSelectionSetter: #listSelectionAt:put:
				mainView: self
				menuGetter: #listMenu
				keystrokeAction: nil.
	theTestsList autoDeselect: false.
	theTestsList color: Color veryVeryLightGray.
	column2 _ LayoutMorph newColumn.
	column2
		addMorph: theTestsList proportionalHeight: 1;
		addMorph: self optionalButtonRow fixedHeight: self defaultButtonPaneHeight.

	runOneButton _ self buildRunOneButton.
	runButton _ self buildRunButton.
	runProfiledButton := self buildRunProfiledButton.	
	column3 _ LayoutMorph newColumn.
	column3 addMorphs: { runOneButton . runButton . runProfiledButton }.
	
	row _ LayoutMorph newRow.
	row
		addMorph: column1 fixedWidth: 80;
		addMorph: column2 proportionalWidth: 1;
		addMorph: column3 fixedWidth: 120.

	^row

! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1271-CuisCore-GermanArduino-2012May02-17h58m-gsa.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1271] on 7 May 2012 at 9:35:44 am'!

!classDefinition: #SystemConsistencyTest category: #'System-Tests'!
TestCase subclass: #SystemConsistencyTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'System-Tests'!

TestCase subclass: #SystemConsistencyTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'System-Tests'!
!SystemConsistencyTest commentStamp: '<historical>' prior: 0!
 General system - wide image health tests.!
!SystemConsistencyTest methodsFor: 'testing' stamp: 'jmv 5/7/2012 09:35'!
           testMethodsWithUnboundGlobals
	"
	SystemConsistencyTest new testMethodsWithUnboundGlobals
	"
	self assert: Smalltalk methodsWithUnboundGlobals isEmpty! !
!SystemDictionary methodsFor: 'query' stamp: 'jmv 5/6/2012 19:26'!
   methodsWithUnboundGlobals
	"Get all methods that use undeclared global objects that are not listed in Undeclared. For a clean image the result should be empty."
	"
	self assert: Smalltalk methodsWithUnboundGlobals isEmpty
	"
	^ self allSelect: [ :m |
		m literals anySatisfy: [ :l |
			l isVariableBinding and: [
				l key isSymbol and: [
					"avoid class-side methodClass literals"
					(m methodClass bindingOf: l key)
						ifNil: [
							(Undeclared
								associationAt: l key
								ifAbsent: [ ]) ~~ l ]
						ifNotNil: [ :b |
							b ~~ l ]]]]]! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1272-MethodsWithUnboundGlobals-JuanVuletich-2012May07-09h32m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1271] on 7 May 2012 at 9:38:15 am'!
!MessageTally class methodsFor: 'spying' stamp: 'jmv 5/7/2012 09:36' prior: 16892238!
  spyAllOn: aBlock
	"Spy on all the processes in the system
	
	[1000 timesRepeat: [3.14159 printString. Processor yield]] fork.
	[1000 timesRepeat: [20 factorial. Processor yield]] fork.
	[1000 timesRepeat: [20 factorial. Processor yield]] fork.
	MessageTally spyAllOn: [ (Delay forMilliseconds: 100) wait]
	
	"
	| node result |
	node _ self new.
	node reportOtherProcesses: true.	"Irrelevant in this case. All processes will be reported on their own."
	result _ node spyAllEvery: self defaultPollPeriod on: aBlock.
	SystemWindow
		editText: (Workspace withText: (String streamContents: [:s | node report: s]))
		label: 'Spy Results'
		wrap: false.
	^ result! !
!MessageTally class methodsFor: 'spying' stamp: 'jmv 5/7/2012 09:36' prior: 16892275!
                      spyOn: aBlock reportOtherProcesses: aBoolean
	"
	Spy on aBlock, in the current process. Can include or not statistics on other processes in the report.
	[1000 timesRepeat: [
		100 timesRepeat: [120 factorial].
		(Delay forMilliseconds: 10) wait
		]] forkAt: 45 named: '45'.
	MessageTally spyOn: [10000 timesRepeat: [1.23 printString]] reportOtherProcesses: true
	"
	| node result |
	node _ self new.
	node reportOtherProcesses: aBoolean.
	result _ node spyEvery: self defaultPollPeriod on: aBlock.
	SystemWindow
		editText: (Workspace withText: (String streamContents: [:s | node report: s]))
		label: 'Spy Results'
		wrap: false.
	^ result! !
!MessageTally class methodsFor: 'spying' stamp: 'jmv 5/7/2012 09:37' prior: 16892331!
      spyOnProcess: aProcess forMilliseconds: msecDuration reportOtherProcesses: aBoolean
	"
	Spy on aProcess for a certain amount of time
	| p1 p2 |  
	p1 _ [100000 timesRepeat: [3.14159 printString. Processor yield]] newProcess.  
	p2 _ [100000 timesRepeat: [3.14159 printString. Processor yield]] newProcess.
	p1 resume.
	p2 resume.  
	(Delay forMilliseconds: 100) wait.  
	MessageTally spyOnProcess: p1 forMilliseconds: 1000 reportOtherProcesses: true
	"
	| node |
	node _ self new.
	node reportOtherProcesses: aBoolean.
	node
		spyEvery: self defaultPollPeriod
		onProcess: aProcess
		forMilliseconds: msecDuration.
	SystemWindow
		editText: (Workspace withText: (String streamContents: [:s | node report: s]))
		label: 'Spy Results'
		wrap: false! !
!MessageTally class methodsFor: 'spying' stamp: 'jmv 5/7/2012 09:37' prior: 16892381!
                            tallySendsTo: receiver inBlock: aBlock showTree: treeOption
	"
	MessageTally tallySends: [3.14159 printString]
	"
	"This method uses the simulator to count the number of calls on each method
	invoked in evaluating aBlock. If receiver is not nil, then only sends
	to that receiver are tallied.
	Results are presented as leaves, sorted by frequency,
	preceded, optionally, by the whole tree."
	| prev tallies startTime totalTime |
	startTime _ Time millisecondClockValue.
	tallies _ MessageTally new class: aBlock receiver class method: aBlock method.
	tallies reportOtherProcesses: true.	"Do NOT filter nodes with nil process"
	prev _ aBlock.
	thisContext sender
		runSimulated: aBlock
		contextAtEachStep: [ :current |
			current == prev ifFalse: [ "call or return"
				prev sender ifNotNil: [ "call only"
					(receiver == nil or: [ current receiver == receiver ])
						ifTrue: [ tallies tally: current by: 1 ]].
				prev _ current]].

	totalTime _ Time millisecondClockValue - startTime // 1000.0 roundTo: 0.01.
	SystemWindow
		editText: (Workspace withText: (String streamContents: [ :s |
			s nextPutAll: 'This simulation took ' , totalTime printString, ' seconds.'; newLine.
			treeOption
				ifTrue: [ tallies fullPrintExactOn: s ]
				ifFalse: [ tallies leavesPrintExactOn: s ]]))
		label: 'Spy Results'
		wrap: false! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1273-MessageTallyOpensWorkspace-JuanVuletich-2012May07-09h35m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1271] on 7 May 2012 at 9:41:05 am'!
!FormCanvas methodsFor: 'drawing-text' stamp: 'jmv 5/7/2012 09:40' prior: 16861123!
   paragraph: aParagraph bounds: boundsInWorld color: c selectionColor: sc
	| displayScanner leftInRun line |

	self setPaintColor: c.

	displayScanner _ MorphicScanner new 
		text: aParagraph paragraphText
		foreground: (shadowColor ifNil: [ c ])
		ignoreColorChanges: self isShadowDrawing.
	displayScanner canvas: self.

	leftInRun _ 0.
	"Take clipRect into account. Extrememly fast scrolls and redraws of huge files (like .sources)"
	(aParagraph lineIndexForPoint: (0@0 max: clipRect origin- boundsInWorld origin))
		to: (aParagraph lineIndexForPoint: (boundsInWorld extent min: clipRect corner - boundsInWorld origin))
		do: [ :i |
			line _ aParagraph lines at: i.
			aParagraph
				displaySelectionInLine: line
				on: self
				paragraphTopLeft: boundsInWorld topLeft
				selectionColor: sc.
			leftInRun _ displayScanner displayLine: line paragraphTopLeft: boundsInWorld topLeft leftInRun: leftInRun  ]! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1274-SuperFastHugeTextDraw-JuanVuletich-2012May07-09h38m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1271] on 7 May 2012 at 9:58:06 am'!
!CompiledMethod methodsFor: 'accessing' stamp: 'jmv 5/7/2012 09:56' prior: 16821805!
          endPC
	"Answer the index of the last bytecode."
	| size flagByte |
	"Can't create a zero-sized CompiledMethod so no need to use last for the errorEmptyCollection check.
	 We can reuse size."
	size := self size.
	flagByte := self at: size.
	flagByte = 0 ifTrue: [
		"If last byte = 0, may be either 0, 0, 0, 0 or just 0"
		1 to: 3 do: [:i | (self at: size - i) = 0 ifFalse: [^size - i]].
		^size - 4].
	flagByte < 252 ifTrue: [
		"Magic sources (temp names encoded in last few bytes)"
		^flagByte <= 127
			ifTrue: [size - flagByte - 1]
			ifFalse: [size - (flagByte - 128 * 128) - (self at: size - 1) - 2]].
	"Normal 4-byte source pointer"
	^size - 4! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1275-endPCfix-JuanVuletich-2012May07-09h41m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1275] on 7 May 2012 at 1:44:24 pm'!
!BreakPoint commentStamp: '<historical>' prior: 16793543!
                  This exception is raised on executing a breakpoint.

"BreakPoint signal" is called from "Object>>break".!
!BreakpointManager commentStamp: '<historical>' prior: 16793556!
                     This class manages methods that include breakpoints.
It has several class methods to install and uninstall breakpoints.

Evaluating "BreakpointManager clear" will remove all installed breakpoints in the system.

Known issues:
- currently, only break-on-entry type of breakpoints are supported
- emphasis change not implemented for MVC browsers
- uninstalling the breakpoint doesn't auto-update other browsers
- uninstalling a breakpoint while debugging should restart-simulate the current method

Ernest Micklei, 2002

Send comments to emicklei@philemonworks.com!
!ConnectionClosed commentStamp: '<historical>' prior: 16826045!
            Signals a prematurely closed connection.!
!ConnectionTimedOut commentStamp: '<historical>' prior: 16826325!
                    Signals that a connection attempt timed out.!
!ExceptionAboutToReturn commentStamp: '<historical>' prior: 16846364!
            This class is private to the EHS implementation.  Its use allows for ensured execution to survive code such as:

[self doThis.
^nil]
	ensure: [self doThat]

Signaling or handling this exception is not recommended.  Not even slightly.!
!ExternalSemaphoreTable commentStamp: '<historical>' prior: 16847198!
               By John M McIntosh johnmci@smalltalkconsulting.com
This class was written to mange the external semaphore table. When I was writing a Socket test server I discovered various race conditions on the access to the externalSemaphore table. This new class uses class side methods to restrict access using a mutex semaphore. It seemed cleaner to deligate the reponsibility here versus adding more code and another class variable to SystemDictionary 

Note that in Smalltalk recreateSpecialObjectsArray we still directly play with the table.!
!IdentityBag commentStamp: '<historical>' prior: 16867422!
             Like a Bag, except that items are compared with #== instead of #= .

See the comment of IdentitySet for more information.!
!InvalidSocketStatusException commentStamp: '<historical>' prior: 16878188!
                         Signals if an operation on a Socket found it in a state invalid for that operation.!
!NetNameResolver commentStamp: '<historical>' prior: 16901704!
            This class implements TCP/IP style network name lookup and translation facilities.

Attempt to keep track of whether there is a network available.
HaveNetwork	true if last attempt to contact the network was successful.
LastContact		Time of that contact (totalSeconds).
haveNetwork	returns true, false, or #expired.  True means there was contact in the last 30 minutes.  False means contact failed or was false last time we asked.  Get out of false state by making contact with a server in some way (FileList or updates).!
!NoNetworkError commentStamp: '<historical>' prior: 16902223!
                        Signals that no network was found. This could happen, e.g., on dial-up connection when no connection was established when Squeak tried to access it.!
!SoundService commentStamp: '<historical>' prior: 16949962!
              This is the AppRegistry class for the sound system.

A sound system offers a small protocol for playing sounds and making beeps and works like a facade towards the rest of Squeak. A sound system is registered in this registry and can be accessed by "SoundService default". This way we decouple the sound system from the rest of Squeak and make it pluggable. It also is a perfect spot to check for the Preference class>>soundsEnabled.!
!Transcript commentStamp: '<historical>' prior: 16978076!
                   A new implementation of Transcript.
- Thread safe.
- Very fast.
- Independent of Morphic or any other UI framework.
- Immediate feedback.
- Can log to file.
- Not an editor. Only used for output.
- All protocol is on the Class side!
!UnloadedSound commentStamp: '<historical>' prior: 16980518!
                          Instances of me, which are really just FMSounds, are used placeholders for sounds that have been unloaded from this image but which may be re-loaded later.!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1276-FixCrs-JuanVuletich-2012May07-13h41m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1275] on 7 May 2012 at 2:00:31 pm'!

!classDefinition: #SHTextStyler category: #'Shout-Styling'!
Object subclass: #SHTextStyler
	instanceVariableNames: 'sem backgroundProcess monitor formattedText textModel mutex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Shout-Styling'!

Object subclass: #SHTextStyler
	instanceVariableNames: 'sem backgroundProcess monitor formattedText textModel mutex '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Shout-Styling'!
!SHTextStyler methodsFor: 'private' stamp: 'jmv 5/7/2012 13:57'!
 mutex
	mutex
		ifNil: [ mutex := Mutex new ].
	^mutex! !
!SHTextStyler methodsFor: 'styling' stamp: 'jmv 5/7/2012 13:57' prior: 16931250!
                      styleInBackgroundProcess
	"Do the styling on a copy of the provided text (and in a separate process).
	After finishing, send it to the model, via #stylerStyled:checkForChanges:
	The the model should grab the TextAttributes we added to the copy, as appropriate."
	self terminateBackgroundStylingProcess.

	formattedText _ textModel actualContents copy.
	self mutex critical: [
		
		"This part, running at current priority, and fired by sem, is for events to be triggered at current priority"
		sem _ Semaphore new. 
		[
			sem ifNotNil: [
				sem wait.
				textModel stylerStyled: formattedText checkForChanges: true ]
		] forkAt: Processor activePriority.

		"This part runs at low priority, and signals sem when finished"
		backgroundProcess _  [
			textModel privateStyleWith: self.
			sem signal] newProcess.
		backgroundProcess priority: Processor userBackgroundPriority.
		backgroundProcess resume
	]! !
!SHTextStyler methodsFor: 'private' stamp: 'jmv 5/7/2012 13:58' prior: 16931288!
  terminateBackgroundStylingProcess
	self mutex critical: [
		backgroundProcess 
			ifNotNil: [
				backgroundProcess terminate.
				backgroundProcess := nil].
		sem 
			ifNotNil:[
				sem terminateProcess.
				sem := nil].	
	]		! !

SHTextStyler removeSelector: #monitor!

SHTextStyler removeSelector: #monitor!

!classDefinition: #SHTextStyler category: #'Shout-Styling'!
Object subclass: #SHTextStyler
	instanceVariableNames: 'sem backgroundProcess formattedText textModel mutex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Shout-Styling'!

Object subclass: #SHTextStyler
	instanceVariableNames: 'sem backgroundProcess formattedText textModel mutex'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Shout-Styling'!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1277-UseMutexInShout-JuanVuletich-2012May07-13h44m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1277] on 7 May 2012 at 2:40:53 pm'!
!Mutex commentStamp: 'jmv 5/7/2012 14:40' prior: 16901598!
                     A Mutex is a light-weight MUTual EXclusion object being used when two or more processes need to access a shared resource concurrently. A Mutex grants ownership to a single process and will suspend any other process trying to aquire the mutex while in use. Waiting processes are granted access to the mutex in the order the access was requested.

Nested (or recursive) calls to #critical: from a single process are allowed, and the process is not blocked for this: access is granted immediately. For this reason instances of Mutex should be used for resources that support this form of multiple access (i.e. multiple simultaneous access from within a single Process). Resources that don't support this, like access to private state that changes for each call, should use a Semaphore. See Semaphore's class comment

Instance variables:
	semaphore		<Semaphore>		The (primitive) semaphore used for synchronization.
	owner			<Process>			The process owning the mutex.!
!Semaphore commentStamp: 'jmv 5/7/2012 14:39' prior: 16935436!
                              I provide synchronized communication of a single bit of information (a "signal") between Processes. A signal is sent by sending the message signal and received by sending the message wait. If no signal has been sent when a wait message is sent, the sending Process will be suspended until a signal is sent.

Beware that if a process calls 'aSemaphore critical: []' while already in a critical section for that semaphore, it will enter a deadlock. In some cases, a Mutex can be used instead. Refer to the Mutex class comment.!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1278-MutexAndSemaphoreComments-JuanVuletich-2012May07-14h03m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1278] on 7 May 2012 at 10:10:48 pm'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 5/7/2012 22:09'!
                contributorInitialsAndNames
"
| all ok |
all _ Smalltalk allContributors asSet.
ok _ (Smalltalk contributorInitialsAndNames collect: [ :pair | pair first ]) asSet.
self assert: all = ok

initials         name"
^ #(
	#('ab' 					'Alexandre Bergel')
	#('abc' 					'Colin Putney')
	#('acg' 					'Andrew C. Greenberg')
	#('ads' 					'Adam Spitz')
	#('AFi' 					'Alain Fischer')
	#('ajh' 					'Anthony Hannan')
	#('al' 					'Adrian Lienhard')
	#('aoy' 					'Andres Otaduy')
	#('apb' 					'Andrew P. Black')
	#('ar' 					'Andreas Raab')
	#('asm' 				'Alejandro Magistrello')
	#('avi' 					'Avi Bryant')
	#('bf' 					'Bert Freudenberg')
	#('BG' 					'Boris Gaertner')
	#('BJP' 					'Bijan Parsia')
	#('bkv' 					'Brent Vukmer')
	#('bolot' 				'Bolot Kerimbaev')
	#('bp' 					'Bernhard Pieber')
	#('BP' 					'Brent Pinkney') 
	#('brp' 					'Brent Pinkney')
	#('cbc' 					'Chris Cunningham')
	#('cbr'					'Casey Ransberger')
	#('ccn' 					'Chris Norton')
	#('cmm' 				'Chris Muller')
	#('crl' 					'Craig Latta')
	#('cwp' 				'Colin Putney')
	#('das' 					'David A Smith')
	#('dc' 					'Damien Cassou')
	#('dew' 				'Doug Way')
	#('dgd' 				'Diego Gomez Deck')
	#('dhhi' 				'Dan Ingalls')
	#('di' 					'Dan Ingalls')
	#('djp' 					'David J. Pennell')
	#('DSM' 				'Duane Maxwell')
	#('dtl' 					'Dave Lewis')
	#('dvf' 					'Daniel Vainsencher')
	#('eat' 					'Eric Arseneau Tremblay')
	#('eem'					'Eliot Emilio Miranda')
	#('efc' 					'Eddie Cottongim')
	#('em' 					'Ernest Micklei?')
	#('emm' 				'Ernest Micklei')
	#('fbs' 					'Frank Shearar')
	#('FBS' 					'Frank Shearar')
	#('fc' 					'Frank Caggiano')
	#('fcs' 					'Frank Sergeant')
	#('FernandoOlivero' 	'Fernando Olivero')
	#('FernanodOlivero' 	'Fernando Olivero')
	#('GabrielOmarCotelli' 	'Gabriel Omar Cotelli')
	#('gh' 					'Goran Krampe (nee Hultgren)')
	#('gk' 					'Goran Krampe (nee Hultgren)')
	#('gm' 					'German Morales')
	#('go' 					'Georg Gollmann')
	#('gsa' 					'German Arduino')
	#('hmm' 				'Hans-Martin Mosner')
	#('hsj' 					'Henrik Sperre Johansen')
	#('Igor.Stasenko' 		'Igor Stasenko')
	#('ikp' 					'Ian Piumarta')
	#('Jb' 					'Jean Baptiste Arnaud')
	#('jcg' 					'Joshua Gargus')
	#('jdr' 					'Javier Diaz-Reinoso')
	#('je' 					'Joern Eyrich')
	#('jf' 					'Julian Fitzell')
	#('JF' 					'Julian Fitzell')
	#('jhm' 					'John Maloney')
	#('jlb' 					'Jim Benson')
	#('jm' '					John Maloney')
	#('jmb' 					'Hans Baveco')
	#('JMG'					'Jeff Gonis')
	#('JMM' 				'John McIntosh')
	#('jmv' 					'Juan Vuletich')
	#('JMV' 					'Juan Vuletich')
	#('jp' 					'Joseph Pelrine')
	#('jrm' 					'John-Reed Maffeo')
	#('jrp' 					'John Pierce')
	#('jsp' 					'Jeff Pierce')
	#('kfr' 					'Karl Ramberg')
	#('KLC'			 		'Ken Causey')
	#('kph'					'Keith Hodges')
	#('KTT' 				'Kurt Thams')
	#('laza' 				'Alexander Lazarevic')
	#('LC' 					'Leandro Caniglia')
	#('len' 					'Luciano Esteban Notarfrancesco')
	#('lr' 					'Lukas Renggli')
	#('Lukas Renggli' 		'Lukas Renggli')
	#('ls' 					'Lex Spoon')
	#('md' 					'Marcus Denker')
	#('MarcusDenker' 		'Marcus Denker')
	#('marcus.denker' 		'Marcus Denker')
	#('mdr' 				'Mike Rutenberg')
	#('mga' 				'Markus Galli')
	#('mha' 				'Michael Haupt')
	#('mir' 					'Michael Rueger')
	#('mjg' 					'Mark Guzdial')
	#('mk' 					'Matej Kosik')
	#('MPH' 				'Michael Hewner')
	#('mpw' 				'Marcel Weiher')
	#('MPW' 				'Marcel Weiher')
	#('mrm' 				'Martin McClure')
	#('mtf' 					'Matthew Fulmer')
	#('mu' 					'Masashi Umezawa')
	#('nb' 					'Naala Brewer')
	#('nice'				 	'Nicolas Cellier')
	#('nk' 					'Ned Konz')
	#('nop' 					'Jay Carlson')
	#('NS' 					'Nathanael Schaerli')
	#('panda' 				'Michael Rueger')
	#('PHK' 				'Peter Keeler')
	#('Pmm' 				'Philippe Marschall')
	#('pnm' 				'Paul McDonough')
	#('r++' 				'Gerardo Richarte')
	#('raa' 					'Bob Arning')
	#('RAA' 					'Bob Arning')
	#('raok' 				'Richard A. O''Keefe')
	#('rca' 					'Russell Allen')
	#('reThink'			 	'Paul McDonough')
	#('rew' 					'Roger Whitney')
	#('rhi' 					'Robert Hirschfeld')
	#('rr' 					'Romain Robbes')
	#('rss' 					'Ron Spengler')
	#('rw' 					'Robert Withers')
	#('rww' 				'Robert Withers')
	#('Sames' 				'Samuel S. Shuster')
	#('sbw' 				'Stephan B. Wessels')
	#('sd' 					'Stephane Ducasse')
	#('SD' 					'Stephane Ducasse')
	#('sge' 					'Steve Elkins')
	#('sma' 				'Stefan Matthias Aust')
	#('sps' 					'Steven Swerling')
	#('SqR' 					'Andres Valloud')
	#('sr' 					'Stephan Rudlof')
	#('SSS' 				'Samuel S. Shuster')
	#('stephane.ducasse' 	'Stephane Ducasse')
	#('stephaneducasse' 	'Stephane Ducasse')
	#('stp' 					'Stephen Travis Pope')
	#('sumim' 				'Masato Sumi')
	#('svp' 					'Stephen Vincent Pair')
	#('sw' 					'Scott Wallace')
	#('TAG' 				'Travis Griggs')
	#('tak' 					'Takashi Yamamiya')
	#('tao' 					'Tim Olson')
	#('TBn' 					'Torsten Bergmann')
	#('tfei' 					'The Fourth Estate, Inc.')
	#('tfel' 					'Tim Felgentreff')
	#('th' 					'Torge Husfeldt')
	#('tk' 					'Ted Kaehler')
	#('tlk' 					'Tom Koenig')
	#('tpr' 					'Tim Rowledge')
	#('TPR' 					'Tim Rowledge')
	#('tween' 				'Andy Tween')
	#('ul' 					'Levente Uzonyi')
	#('vb' 					'Vassili Bykov')
	#('ward' 				'Ward Cunningham')
	#('wiz' 					'Jerome Peace')
	#('wod' 				'Bill Dargel')
	#('yo' 					'Yoshiki Ohshima')
	#('zz' 					'Serge Stinckwich'))! !
!AdditionalMethodState methodsFor: 'testing' stamp: 'jmv 5/7/2012 16:16' prior: 16781057!
                              hasLiteralSuchThat: aBlock
	"Answer true if litBlock returns true for any literal in this array, even if embedded in further array structure.
	 This method is only intended for private use by CompiledMethod hasLiteralSuchThat:"
	1 to: self basicSize do: [:i |
		| propertyOrPragma "<Association|Pragma>" |
		propertyOrPragma := self basicAt: i.
		(propertyOrPragma isVariableBinding
			ifTrue: [(aBlock value: propertyOrPragma key)
					or: [(aBlock value: propertyOrPragma value)
					or: [propertyOrPragma value isArray
						and: [propertyOrPragma value hasLiteralSuchThat: aBlock]]]]
			ifFalse: [propertyOrPragma hasLiteralSuchThat: aBlock]) ifTrue: [^true]].
	^false! !
!AdditionalMethodState methodsFor: 'accessing' stamp: 'jmv 5/7/2012 21:34' prior: 16781171!
at: aKey put: aValue
	"Replace the property value or pragma associated with aKey."

	| keyAlreadyExists |
	keyAlreadyExists _ false.
	
	1 to: self basicSize do: [ :i |
		| propertyOrPragma "<Association|Pragma>" |
		(propertyOrPragma _ self basicAt: i) key == aKey ifTrue: [
			keyAlreadyExists _ true.
			propertyOrPragma isVariableBinding
				ifTrue: [ propertyOrPragma value: aValue ]
				ifFalse: [ self basicAt: i put: aValue ]]].
	
	keyAlreadyExists ifFalse: [
		method propertyValueAt: aKey put: aValue ].
	
	^ aValue! !
!Color methodsFor: 'transformations' stamp: 'jmv 5/7/2012 15:05' prior: 16817497!
                              twiceDarker
	"Answer a significantly darker shade of this color."

	^ self adjustSaturation: 0.076 brightness: -0.15! !
!DateAndTime methodsFor: 'squeak protocol' stamp: 'jmv 5/7/2012 15:26' prior: 16832510!
                noon
	"Answer a DateAndTime starting at noon"

	^ self dayMonthYearDo: [ :d :m :y |
		self class year: y month: m day: d hour: 12 minute: 0 second: 0 ]! !
!DateAndTime class methodsFor: 'squeak protocol' stamp: 'jmv 5/7/2012 15:25' prior: 16832895!
       epoch
	"Answer a DateAndTime representing the Squeak epoch: 1 January 1901"

	^ self julianDayNumber: SqueakEpoch! !
!ExceptionSet methodsFor: 'private' stamp: 'jmv 5/7/2012 21:38' prior: 16846393!
                          add: anException

	^exceptions add: anException! !
!ExceptionTester methodsFor: 'tests' stamp: 'jmv 5/7/2012 21:38' prior: 16846949!
                           simpleNoTimeoutTest

	[ self doSomething ]
		valueWithin: 1 days onTimeout:
			[ self doSomethingElse ]! !
!FloatTest methodsFor: 'IEEE 754' stamp: 'jmv 5/7/2012 15:15' prior: 16856078!
      testInfinity3
	self assert:
		(Float infinity negated asIEEE32BitWord
			printPaddedWith: $0
			to: 32
			base: 2) = '11111111100000000000000000000000'.
	self assert:
		(Float fromIEEE32Bit:
			(Integer
				readFrom: '11111111100000000000000000000000' readStream
				base: 2)) = Float infinity negated! !
!FloatTest methodsFor: 'IEEE 754' stamp: 'jmv 5/7/2012 15:15' prior: 16856112!
testZero2
	self assert:
		(Float negativeZero asIEEE32BitWord
			printPaddedWith: $0
			to: 32
			base: 2) = '10000000000000000000000000000000'.
	self assert:
		(Float fromIEEE32Bit:
			(Integer
				readFrom: '10000000000000000000000000000000' readStream
				base: 2)) = Float negativeZero! !
!Heap methodsFor: 'removing' stamp: 'jmv 5/7/2012 21:54' prior: 16866021!
                 removeAll

	array atAllPut: nil.
	tally _ 0! !
!Integer methodsFor: 'bit manipulation' stamp: 'jmv 5/7/2012 15:09' prior: 16873686!
                            >> shiftAmount  "right shift"
	shiftAmount < 0 ifTrue: [self error: 'negative arg'].
	^ self bitShift: shiftAmount negated! !
!MethodContext methodsFor: 'printing' stamp: 'jmv 5/7/2012 20:25' prior: 16893289!
               printString
	"Answer an emphasized string in case of a breakpoint method"
	(self method notNil and: [ self method hasBreakpoint ])
		ifFalse: [ ^ super printString ].
	^ super printString , ' [break]' asText allBold! !
!ParserNotification methodsFor: 'as yet unclassified' stamp: 'jmv 5/7/2012 16:20' prior: 16911486!
  setName: aString

	name _ aString! !
!Process methodsFor: 'accessing' stamp: 'jmv 5/7/2012 16:16' prior: 16921330!
             isTerminated

	self isActiveProcess ifTrue: [^ false].
	^suspendedContext isNil
	  or: ["If the suspendedContext is the bottomContext it is the block in Process>>newProcess.
		   If so, and the pc is greater than the startpc, the bock has alrteady sent and returned
		   from value and there is nothing more to do."
		suspendedContext isBottomContext
		and: [
			suspendedContext pc > suspendedContext startpc]]! !
!SmallIntegerTest methodsFor: 'testing - basic' stamp: 'jmv 5/7/2012 21:35' prior: 16941097!
    testEven
	
	self assert: (SmallInteger minVal even).
	self deny: (SmallInteger maxVal even).
	
	self deny: ((SmallInteger minVal + 1) even).
	self assert: ((SmallInteger maxVal - 1) even).
	
	self deny: (1 even).
	self deny: (-1 even).
	
	self assert: (2 even).
	self assert: (-2 even).
	
	self assert: (0 even)! !
!SmallIntegerTest methodsFor: 'testing - basic' stamp: 'jmv 5/7/2012 21:35' prior: 16941110!
        testOdd
	
	self deny: (SmallInteger minVal odd).
	self assert: (SmallInteger maxVal odd).
	
	self assert: ((SmallInteger minVal + 1) odd).
	self deny: ((SmallInteger maxVal - 1) odd).
	
	self assert: (1 odd).
	self assert: (-1 odd).
	
	self deny: (2 odd).
	self deny: (-2 odd).
	
	self deny: (0 odd)! !
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 5/7/2012 15:19' prior: 16959983!
                       allContributors
"
	Smalltalk allContributors
"
	| bag author |
	bag _ Bag new.
	Smalltalk allBehaviorsDo: [ :behavior |
		behavior methodsDo: [ :compiledMethod |
			author _ compiledMethod author.
			author notEmpty ifTrue: [
				bag add: author ]]].
	^bag! !
!SystemDictionary class methodsFor: 'copyright' stamp: 'jmv 5/7/2012 14:49' prior: 16964558!
                               copyright
	"The Smalltalk copyright.
	Parts are copyright of many contributors to Squeak and Cuis projects."

	^
'Portions of Cuis are:
Copyright (c) Xerox Corp. 1981, 1982.
Copyright (c) Apple Computer, Inc. 1985-1996.
Copyright (c) Contributors to Squeak and Cuis projects. 1997-2012.'! !
!Time class methodsFor: 'squeak protocol' stamp: 'jmv 5/7/2012 15:26' prior: 16977361!
      hour: hour minute: minute second: second nanoSecond: nanoCount
	"Answer a Time"

	^ self 
		seconds: (hour * SecondsInHour) + (minute * SecondsInMinute) + second 
		nanoSeconds: nanoCount! !
!Time class methodsFor: 'squeak protocol' stamp: 'jmv 5/7/2012 15:27' prior: 16977375!
          noon

	^ self seconds: (SecondsInDay / 2)! !
!UndefinedVariable methodsFor: 'as yet unclassified' stamp: 'jmv 5/7/2012 16:19' prior: 16980327!
                 openMenuIn: aBlock
	| labels caption index |
	labels _ #('yes' 'no' ).
	caption _ name , ' appears to be 
undefined at this point.
Proceed anyway?'.
	index _ aBlock
		value: labels
		value: #()
		value: caption.
	^ self resume: index = 1! !
!Week class methodsFor: 'squeak protocol' stamp: 'jmv 5/7/2012 15:25' prior: 16985838!
                        startDay
	^ StartDay ifNil: [ StartDay _ DayNames first ]! !

Utilities class removeSelector: #reportSenderCountsFor:!

Utilities class removeSelector: #reportSenderCountsFor:!

SystemDictionary removeSelector: #agreedContributors!

SystemDictionary removeSelector: #agreedContributors!

SystemDictionary removeSelector: #missingAuthorsWithMethods!

SystemDictionary removeSelector: #missingAuthorsWithMethods!

SystemDictionary removeSelector: #newContributors!

SystemDictionary removeSelector: #newContributors!

SystemDictionary removeSelector: #okContributors!

SystemDictionary removeSelector: #okContributors!

SystemDictionary removeSelector: #relicenseEffortStartDate!

SystemDictionary removeSelector: #relicenseEffortStartDate!

SystemDictionary removeSelector: #returnedSignatories!

SystemDictionary removeSelector: #returnedSignatories!

BlockContext removeSelector: #argumentCount!

BlockContext removeSelector: #argumentCount!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1279-AuthorNamesTweaks-JuanVuletich-2012May07-18h42m-jmv.3.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #4220] on 11 May 2012 at 3:42:03 pm'!
!CompiledMethod methodsFor: 'accessing' stamp: 'jmv 5/11/2012 15:40' prior: 50333259!
           endPC
	"Answer the index of the last bytecode."
	| size flagByte |
	"Can't create a zero-sized CompiledMethod so no need to use last for the errorEmptyCollection check.
	 We can reuse size."
	size := self size.
	flagByte := self at: size.
	flagByte = 0 ifTrue: [
		"If last byte = 0, may be either 0, 0, 0, 0 or just 0"
		size-1 to: size-3 by: -1 do: [ :i |
			i < self initialPC ifTrue: [ ^ i ].
			(self at: i) = 0 ifFalse: [ ^ i ]].
		^size - 4].
	flagByte < 252 ifTrue: [
		"Magic sources (temp names encoded in last few bytes)"
		^flagByte <= 127
			ifTrue: [size - flagByte - 1]
			ifFalse: [size - (flagByte - 128 * 128) - (self at: size - 1) - 2]].
	"Normal 4-byte source pointer"
	^size - 4! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1280-CuisCore-JuanVuletich-2012May11-15h33m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1280] on 12 May 2012 at 11:08:45 pm'!
!CodePackageFile methodsFor: 'services' stamp: 'jmv 5/12/2012 23:08' prior: 50332310!
   install: aFileStream
	"Installs the package. Replace all existing code in the PackageInfo, removing any code that is not included in us."
	| localName newCodePackage |

	"Give reasonable warnings if there is stuff that can't be properly cleaned. Give the user the chance to abort."
	'=============' print.
	classesToRemove notEmpty ifTrue: [
		('classesToRemove: ', classesToRemove printString) print.
		'=============' print ].
	methodsToRemove notEmpty ifTrue: [
		'methodsToRemove: ' print.
		methodsToRemove do: [ :methodReference | methodReference print ].
		'=============' print ].
	
	"Tirar warning si hay que borrar cosas que no se puede, si hay referencias, etc. Quizas si vamos a borrar el ultimo implementor de un mensaje enviado?"

	"Crear, instalar y devolver una instancia de PackageInfo"
	newCodePackage_ CodePackage
		named: packageName
		createIfAbsent: true
		registerIfNew: true.
	newCodePackage
		fullFileName: fullName;
		sourceSystem: sourceSystem;
		description: description.

	"Esto crea el change set y carga ahi. OJO. En ese CS, hay que borrar todo lo que hay que borrar"
	"These were created in #fromFileStream: ... reuse?"
	localName _ FileDirectory localNameFor: fullName.
	ChangeSet installing: newCodePackage packageName do: [
		aFileStream fileInAnnouncing: 'Installing ', localName, '...'.
		methodsToRemove do: [ :methodReference | methodReference actualClass removeSelector: methodReference selector ].
		classesToRemove do: [ :className | (Smalltalk at: className) removeFromSystem ]].
	newCodePackage hasUnsavedChanges: false.
	"If we are installing an already installed package, zap the change set with possible changes done, 
	as they are irrelevant now: we have the package from disk"
	ChangeSorter removeChangeSet: (ChangeSet changeSetForPackage: newCodePackage).
	Transcript newLine; show: 'Package ', packageName, ' successfully installed'; newLine.
	
	"Tirar undeclared al transcript. warning si quedaron undeclared
	Es feo que tire an transcript undeclareds que despues no lo son..."
	Smalltalk cleanOutUndeclared.
	Undeclared notEmpty ifTrue: [
		('Undeclared: ', Undeclared printString) print ].

	"Descartar la instancia de CodePackageFile"
	^newCodePackage! !
!CodePackageListWindow methodsFor: 'commands' stamp: 'jmv 5/12/2012 23:03' prior: 16813546!
  deletePackage

	| current cs |
	current _ model selection.
	current ifNil: [ ^self ].
	model selectionIndex: 0.	"no selection"
	cs _ ChangeSet changeSetForPackage: current.
	cs isEmpty ifFalse: [
		cs name: cs hash asString, cs name.
		cs isForBaseSystem: true ].
	CodePackage deregister: current! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1281-ChangeSetTweaks-JuanVuletich-2012May12-22h55m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1280] on 12 May 2012 at 11:31:06 pm'!
!Utilities class methodsFor: 'identification' stamp: 'jmv 5/12/2012 23:27'!
                         clearAuthor
	AuthorInitials _ ''.
	AuthorName _ ''! !
!Utilities class methodsFor: 'identification' stamp: 'jmv 5/12/2012 23:29'!
                              setAuthor
	"Put up a dialog allowing the user to specify the author's initials.
	Utilities setAuthor
	"
	| authorName |
	AuthorInitials _ (FillInTheBlank
		request: 'Please type your initials: '
		initialAnswer: AuthorInitials) withBlanksTrimmed.
	authorName _ (Smalltalk contributorInitialsAndNames
		detect: [ :pair |
			pair first = AuthorInitials ]
		ifNone: [
			AuthorName _ (FillInTheBlank
				request: 'Please type your name:'
				initialAnswer: 'Your Name') withBlanksTrimmed.
			^ self ]) second withBlanksTrimmed.
	(self confirm: 'Are you ' , authorName , '?')
		ifTrue: [ AuthorName _ authorName ]
		ifFalse: [
			self inform: 'Please enter different initials, then'.
			self setAuthor ]! !
!SystemDictionary methodsFor: 'sources, change log' stamp: 'jmv 5/12/2012 23:27' prior: 16962604!
                               openSourceFiles
	self imageName = LastImageName ifFalse: [
		"Reset the author initials to blank when the image gets moved"
		LastImageName _ self imageName.
		Utilities clearAuthor].
	"Warning: Do open the source files only if nil.
	If not nil, it is because they are internalized and the files should not be opened"
	FileDirectory
		openSources: self defaultSourcesName
		andChanges: self localChangesName
		forImage: LastImageName.
	CuisSourceFileArray install! !
!Theme methodsFor: 'menus' stamp: 'jmv 5/12/2012 23:26' prior: 16975775!
    miscellaneousIcons

	"Everything else."

	^ {
		#('restore display (r)' 'set display depth...' 'move windows onscreen' 'Utilities saveDisplay.') -> #displayIcon.
		#('changes...' 'dual change sorter' 'change sets with this method' 'find a change sorter' 'recent changes in file' 'Undo / Redo history') -> #changesIcon.
		#('print PS to file...' ) -> #printIcon.
		#('find again (g)' 'full stack (k)') -> #systemIcon.
		#('print it (p)' 'check change set for slips') -> #printIcon.
		#('accept (s)' 'make changes go to me (m)') -> #acceptIcon.
		#('cancel (l)' ) -> #cancelIcon.
		#('debug...' 'debug it' 'toggle break on entry') -> #debugIcon.
		#('close' 'close all debuggers' 'close top window') -> #closeIcon.
		#('collapse' 'hide taskbar' 'collapse all windows') -> #collapseIcon.
		#('expand / contract' 'show taskbar' 'expand all windows') -> #expandIcon.
		#('menu') -> #windowMenuIcon.
		#('browse all' 'browser' 'browse it (b)' 'MessageTally UI and browse' 'browse recent submissions' 'browse full (b)' 'find changed browsers...' 'browse (b)' 'browse my changes') -> #editFindReplaceIcon.
		#('workspace' 'workspace with contents') -> #terminalIcon.
		#('styled text editor' 'text editor' 'edit this list' 'edit postscript...' 'add postscript...') -> #textEditorIcon.
		#('file list' 'find a fileList') -> #systemFileManagerIcon.
		#('transcript' 'find a transcript' 'Transcript clear.' 'log to transcript') -> #printerIcon.
		#('process browser' 'vm statistics' 'MessageTally all Processes') -> #systemMonitorIcon.
		#('emergency evaluator' 'conflicts with other change sets' 'check for slips' 'conflicts with change set opposite' 'conflicts with category opposite') -> #emblemImportantIcon.
		#('change sorter') -> #halfRefreshIcon.
		#('SUnit Test Runner') -> #weatherFewCloudsIcon.
		#('system fonts...' 'set font... (k)') -> #preferencesDesktopFontIcon.
		#('full screen on') -> #viewFullscreenIcon.
		#('full screen off') -> #exitFullscreenIcon.
		#('set desktop color...') -> #wallpaperIcon.
		#('preferences...' 'what to show...') -> #preferencesIcon.
		#('command-key help') -> #keyboardShortcutsIcon.
		#('world menu help') -> #globeIcon.
		#('useful expressions' 'class comments with it' 'check for uncommented methods' 'check for uncommented classes') -> #chatIcon.
		#('set author...' 'check for other authors' 'check for any other authors') -> #usersIcon.
		#('space left') -> #removableMediaIcon.
		#('start drawing all again' 'window color...') -> #graphicsIcon.
		#('start stepping again') -> #mediaPlaybackStartIcon.
		#('file out current change set' 'fileOut' 'File out and remove (o)' 'File out and keep (k)') -> #fileOutIcon.
		#('recently logged changes...' 'versions (v)' 'recent classes... (r)' 'trim history' 'profile messages (m)') -> #clockIcon.
		#('senders of it (n)' 'senders of... (n)' 'local senders of...' 'senders (n)') -> #mailForwardIcon.
		#('implementors of it (m)' 'implementors of... (m)' 'implementors of sent messages') -> #developmentIcon.
		#('references to it (N)') -> #addressBookIcon.
		#('class var refs...' 'class refs (N)' 'class variables' 'class vars' 'local implementors of...' 'subclass template') -> #classIcon.
		#('inst var refs...' 'inst var defs...' 'sample instance' 'inspect Pointers (P)') -> #instanceIcon.
		#('Use Selection for Find (h)' 'rename class ...' 'rename...' 'change title...') -> #saveAsIcon.
		#('method source with it' 'browse method (O)' 'check for uncategorized methods') -> #scriptIcon.
		#('method strings with it (E)') -> #genericTextIcon.
		#('browse hierarchy (h)' 'move to top' 'promote to top of list') -> #goTopIcon.
		#('move up' 'make next-to-topmost') -> #goUpIcon.
		#('move to bottom' 'send to back' 'send top window to back') -> #goBottomIcon.
		#('inheritance (i)' 'move down') -> #goDownIcon.
		#('browse protocol (p)' 'spawn sub-protocol') -> #spreadsheetIcon.
		#('spawn full protocol') -> #speadsheetTemplateIcon.
		#('alphabetize') -> #fontXGenericIcon.
		#('Installed Packages' 'browse' 'show category (C)' 'categorize all uncategorized' 'select change set...' 'view affected class categories') -> #packageIcon.
		#('remove from current change set' 'remove empty categories' 'subtract other side (-)' 'remove from this browser') -> #listRemoveIcon.
		#('add to current change set' 'add all meths to current chgs' 'add preamble (p)') -> #listAddIcon.
		#('toggle diffing (D)' 'toggle selections') -> #switchIcon.
		#('reorganize' 'create inst var accessors' 'ChangeSorter reorderChangeSets.' 'reorder all change sets' 'by name' 'by size' 'by date') -> #sendReceiveIcon.
		#('unsent methods' 'unreferenced class vars' 'unreferenced inst vars' 'Undeclared inspect.' 'Undeclared removeUnreferencedKeys; inspect.' 'ChangeSorter removeEmptyUnnamedChangeSets.' 'check for unsent messages') -> #junkIcon.
		#('update' 'turn on auto-update (a)' 'update list (u)') -> #updateIcon.
		#('find changed windows...') -> #newWindowIcon.
		#('make undraggable') -> #pushPinIcon.
		#('Utilities saveScreenshot.') -> #stillCameraIcon.
		#('add new directory') -> #newFolderIcon.
		#('select all' 'deselect all') -> #selectAllIcon.
		#('sort by date') -> #dateIcon.
		#('justified') -> #formatJustifyFillIcon.
		#('centered') -> #formatJustifyCenterIcon.
		#('set alignment...' 'leftFlush') -> #formatJustifyLeftIcon.
		#('rightFlush') -> #formatJustifyRightIcon.
		#('signal Semaphore (S)') -> #haloHelpIcon.
		#('Change Paragraph Style...' 'Change Character Style...' 'Remove Character Style' 'Replace all uses of Paragraph Style...' 'Replace all uses of Character Style...') -> #fontXGenericIcon.
	}! !
!Utilities class methodsFor: 'identification' stamp: 'jmv 5/12/2012 23:25' prior: 16980966!
         authorInitials
	"Answer the initials to be used to identify the current code author.  "

	[AuthorInitials isEmpty] whileTrue: [self setAuthor].
	^ AuthorInitials! !
!Utilities class methodsFor: 'identification' stamp: 'jmv 5/12/2012 23:25' prior: 16980981!
                               authorName
	[AuthorName isEmpty] whileTrue: [self setAuthor].
	^ AuthorName! !

Utilities class removeSelector: #authorName:!

Utilities class removeSelector: #authorName:!

Utilities class removeSelector: #authorNamePerSe!

Utilities class removeSelector: #authorNamePerSe!

Utilities class removeSelector: #changeStampPerSe!

Utilities class removeSelector: #changeStampPerSe!

Utilities class removeSelector: #dateStamp!

Utilities class removeSelector: #dateStamp!

Utilities class removeSelector: #setAuthorInitials!

Utilities class removeSelector: #setAuthorInitials!

Utilities class removeSelector: #setAuthorInitials:!

Utilities class removeSelector: #setAuthorInitials:!

Utilities class removeSelector: #setAuthorName!

Utilities class removeSelector: #setAuthorName!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1282-AuthorNameAndInitialsTweaks-JuanVuletich-2012May12-23h08m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1282] on 13 May 2012 at 10:08:55 pm'!
!ChangeSorterWindow methodsFor: 'menu building' stamp: 'jmv 5/13/2012 22:07' prior: 16802259!
                          changeSetMenu
	"Set up aMenu to hold commands for the change-set-list pane.  This could be for a single or double changeSorter"

	| aMenu |
	aMenu _ MenuMorph new defaultTarget: model.
	aMenu title: 'Change Set'.
	aMenu addStayUpIcons.

	aMenu add: 'File out and remove (o)' 			action: #fileOutAndRemove.
	aMenu add: 'File out and keep (k)' 				action: #fileOutAndKeep.
	aMenu addLine.

	aMenu add: 'Rename change set (r)' 			action: #rename.
	aMenu add: 'Destroy change set (x)' 			action: #remove.
	aMenu addLine.
	model currentCanHavePreambleAndPostscript ifTrue: [
		aMenu addLine.
		model currentHasPreamble
			ifTrue: [
				aMenu add: 'Edit preamble (p)' 		action: #addPreamble.
				aMenu add: 'Remove preamble' 	action: #removePreamble]
			ifFalse: [
				aMenu add: 'Add preamble (p)' 		action: #addPreamble].
		model currentHasPostscript
			ifTrue: [
				aMenu add: 'Edit postscript...' 		action: #editPostscript.
				aMenu add: 'Remove postscript' 	action: #removePostscript]
			ifFalse: [
				aMenu add: 'Add postscript...' 		action: #editPostscript].
	].
	aMenu addLine.

	"CONFLICTS SECTION"
	aMenu add: 'conflicts with other change sets' action: #browseMethodConflicts.
	aMenu balloonTextForLastItem: 'Browse all methods that occur both in this change set and in at least one other change set.'.
	aMenu addLine.

	"CHECKS SECTION"
	aMenu add: 'trim history' target: model action: #trimHistory.
	aMenu balloonTextForLastItem: ' Drops any methods added and then removed, as well as renaming and reorganization of newly-added classes. ',
				'NOTE: can cause confusion if later filed in over an earlier version of these changes'.

	aMenu add: 'view affected class categories' target: model action: #viewAffectedClassCategories.
	aMenu balloonTextForLastItem: ' Show class categories affected by any contained change'.

	^ aMenu! !
!Preferences class methodsFor: 'themes' stamp: 'jmv 5/13/2012 22:00' prior: 16920783!
                         cuisDefaults
	"
	Preferences cuisDefaults
	"
	self setPreferencesFrom:

	#(
		(balloonHelpEnabled true)
		(browseWithPrettyPrint false)
		(caseSensitiveFinds false)
		(checkForSlips true)
		(cmdDotEnabled true)
		(collapseWindowsInPlace false)
		(diffsInChangeList true)
		(diffsWithPrettyPrint false)
		(fastDragWindowForMorphic false)
		(menuKeyboardControl true)
		(optionalButtons true)
		(extraDebuggerButtons true)
		(smartUpdating true)
		(subPixelRenderFonts true)
		(thoroughSenders true)
	)! !
!Preferences class methodsFor: 'themes' stamp: 'jmv 5/13/2012 22:00' prior: 16920802!
                  slowMachine

	self setPreferencesFrom: #(
		(balloonHelpEnabled false)
		(browseWithPrettyPrint false)
		(caseSensitiveFinds true)
		(checkForSlips false)
		(cmdDotEnabled true)
		(collapseWindowsInPlace false)
		(diffsInChangeList false)
		(diffsWithPrettyPrint false)
		(fastDragWindowForMorphic true)
		(menuKeyboardControl false)
		(optionalButtons false)
		(smartUpdating false)
		(subPixelRenderFonts false)
		(thoroughSenders false)
	).
	ClassicTheme beCurrent! !
!Preferences class methodsFor: 'themes' stamp: 'jmv 5/13/2012 22:00' prior: 16920820!
                   smalltalk80
	"A traditional monochrome Smalltalk-80 look and feel, clean and austere, and lacking many features added to Squeak in recent years. Caution: this theme removes the standard Squeak flaps, turns off the 'smartUpdating' feature that keeps multiple browsers in synch, and much more."

	self setPreferencesFrom:

	#(
		(balloonHelpEnabled false)
		(browseWithPrettyPrint false)
		(caseSensitiveFinds true)
		(checkForSlips false)
		(cmdDotEnabled true)
		(collapseWindowsInPlace false)
		(diffsInChangeList false)
		(diffsWithPrettyPrint false)
		(menuKeyboardControl false)
		(optionalButtons false)
		(smartUpdating false)
		(thoroughSenders false)
	)! !
!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/13/2012 22:03' prior: 16974647!
                buildWorldMenu
	"Build the menu that is put up when the screen-desktop is clicked on"

	| menu |
	menu _ MenuMorph new defaultTarget: self.
	self colorForDebugging: menu.
	menu addStayUpIcons.
	self fillIn: menu
		from: {
				{ 'Open...'. { self. #openWindow}}.
				{ 'New morph...'. { self. #newMorph}.
					'Offers a variety of ways to create new objects'}.
				{ 'Appearance...'. { self. #appearanceDo}.
					'put up a menu offering many controls over appearance.'}.
				{ 'Windows...'. { self. #windowsDo}}.
				{ 'Help...'. { self. #helpDo}.
					'puts up a menu of useful items for updating the system, determining what version you are running, and much else'}.
				nil.
				{ 'Changes...'. { self. #changesDo}}.
				{ 'Debug...'. { self. #debugDo}.
					'a menu of debugging items'}.
				{ 'Do...'. { Utilities. #offerCommonRequestsInMorphic}.
					'put up an editible list of convenient expressions, and evaluate the one selected.'}.
				{ 'Restore Display (r)'. { World. #restoreMorphicDisplay}.
					'repaint the screen -- useful for removing unwanted display artifacts, lingering cursors, etc.'}.
				nil.
				{ 'Save'. { Smalltalk . #saveSession}.
					'save the current version of the image on disk'}.
				{ 'Save as...'. { Smalltalk . #saveAs}.
					'save the current version of the image on disk under a new name.'}.
				{ 'Save as New Version'. { Smalltalk . #saveAsNewVersion}.
					'give the current image a new version-stamped name and save it under that name on disk.'}.
				{ 'Save and Quit'. { self. #saveAndQuit}.
					'save the current image on disk, and quit out of Cuis.'}.
				{ 'Quit'. { self. #quitSession}.
					'quit out of Cuis.'}}.
	^menu! !
!TheWorldMenu methodsFor: 'construction' stamp: 'jmv 5/13/2012 21:51' prior: 16974931!
                              openMenu
	"Build the open window menu for the world."

	| menu |
	menu _ self menu: 'Open...'.

	ExtraOpenCommands ifNotNil: [
		self fillIn: menu from: ExtraOpenCommands ].

	self fillIn: menu from: {
		{'Text Editor' . {self . #openTextEditor}. 'A window for composing text' }.
		{'Workspace' . {self . #openWorkspace}. 'A window for evaluating Smalltalk expressions' }.
		{'Browser' . { self . #openBrowser}. 'A Smalltalk code browser, for studying and modifying the system'}.
		{'Message Names' . { self . #openMessageNames} . 'A tool for finding and editing methods that contain any given keyword in their names.'}.
		{'Transcript' . {self . #openTranscript}. 'A window showing contents of the System Transcript' }.
		nil.
		{'Installed Packages' . { self . #openPackageList}. 'A tool for managing Packages (optional units of code) installed in the system'}.
		{'Change Sorter' . {self . #openChangeSorter1} . 'A tool allowing you to view the methods in a Change Set, especially changes to the Base System' }.
		nil.
		{ 'Process Browser' . { ProcessBrowserWindow . #openProcessBrowser } }.
		{ 'Emergency Evaluator'. { Transcripter. #emergencyEvaluator } }.
		nil.
		{'File List' . {self . #openFileList} . 'An explorer of the File System' }.
		{'SUnit Test Runner' . {TestRunnerWindow . #openTestRunner} . 'A tool allowing you to compare and manipulate two change sets concurrently' }.
	}.
	^menu! !

Preferences class removeSelector: #simpleMenus!

Preferences class removeSelector: #simpleMenus!

ChangeSorterWindow removeSelector: #offerShiftedChangeSetMenu!

ChangeSorterWindow removeSelector: #offerShiftedChangeSetMenu!

ChangeSorterWindow removeSelector: #offerUnshiftedChangeSetMenu!

ChangeSorterWindow removeSelector: #offerUnshiftedChangeSetMenu!

ChangeSorterWindow removeSelector: #shiftedChangeSetMenu!

ChangeSorterWindow removeSelector: #shiftedChangeSetMenu!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1283-MenuTweaks-JuanVuletich-2012May13-21h47m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1282] on 13 May 2012 at 10:38:14 pm'!

!classDefinition: #ChangeSorter category: #'Tools-Changes'!
CodeProvider subclass: #ChangeSorter
	instanceVariableNames: 'myChangeSet currentClassName currentSelector priorChangeSetList priorDirtyFlags'
	classVariableNames: 'AllChangeSets'
	poolDictionaries: ''
	category: 'Tools-Changes'!

CodeProvider subclass: #ChangeSorter
	instanceVariableNames: 'myChangeSet currentClassName currentSelector priorChangeSetList priorDirtyFlags '
	classVariableNames: 'AllChangeSets '
	poolDictionaries: ''
	category: 'Tools-Changes'!
!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 5/13/2012 22:28'!
      changeSetDirtyFlags

	^ (ChangeSorter allChangeSets collect: [ :each |
		(each isForBaseSystem and: [ each hasUnsavedChanges ])
			ifTrue: [ '     --->']
			ifFalse: [ '       -' ]]) reversed! !
!ChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 5/13/2012 22:23'!
                initialExtent
	^720@480! !
!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 5/13/2012 22:31' prior: 16801656!
            fileOutAndKeep
	"File out the current change set."

	myChangeSet fileOut.
	self update! !
!ChangeSorter methodsFor: 'changeSet menu' stamp: 'jmv 5/13/2012 22:37' prior: 16801780!
             updateIfNecessary
	"Recompute all of my panes."

	| newList |

	myChangeSet ifNil: [^ self].  "Has been known to happen though shouldn't"
	myChangeSet isMoribund ifTrue: [
		self changed: #changeSetList.
		^ self showChangeSet: ChangeSet changeSetForBaseSystem ].

	newList _ self changeSetList.
	(priorChangeSetList == nil or: [priorChangeSetList ~= newList])
		ifTrue: [
			priorChangeSetList _ newList.
			self changed: #changeSetList ].

	newList _ self changeSetDirtyFlags.
	(priorDirtyFlags == nil or: [priorDirtyFlags ~= newList])
		ifTrue: [
			priorDirtyFlags _ newList.
			self changed: #changeSetDirtyFlags ]! !
!ChangeSorterWindow methodsFor: 'GUI building' stamp: 'jmv 5/13/2012 22:27' prior: 16802203!
                    buildMorphicWindow
	"Add a set of change sorter views to the given top view offset by the given amount. To create a single change sorter, call this once with an offset of 0@0. To create a dual change sorter, call it twice with offsets of 0@0 and 0.5@0."

	| dirtyFlags changeSetList classList messageList upperPanes |
	model myChangeSet ifNil: [
		self flag: #ojo. "Or whatever was last changed, or is top of list, or whatever"
		model myChangeSet: ChangeSet changeSetForBaseSystem ].

	dirtyFlags _ PluggableListMorph
		model: model
		listGetter: #changeSetDirtyFlags
		indexGetter: nil
		indexSetter: nil.
	dirtyFlags color: Color white.
	dirtyFlags _ LayoutMorph newColumn
		color: Color veryLightGray;
		addMorph: (Morph new color: Color transparent) fixedHeight: 4;
		addMorph: (StringMorph new contents: ' Unsaved?') fixedHeight: 16;
		addMorphUseAll: dirtyFlags.

	changeSetList _ (PluggableListMorphByItem
				model: model
				listGetter: #changeSetList
				indexGetter: #currentCngSet
				indexSetter: #showChangeSetNamed:
				mainView: self
				menuGetter: #changeSetMenu
				keystrokeAction: #changeSetListKey:from:)
			autoDeselect: false.
	changeSetList color: Color white.
	changeSetList _ LayoutMorph newColumn
		color: Color veryLightGray;
		addMorph: (Morph new color: Color transparent) fixedHeight: 4;
		addMorph: (StringMorph new contents: 'Change Set name') fixedHeight: 16;
		addMorphUseAll: changeSetList.

	classList _ PluggableListMorphByItem
				model: model
				listGetter: #classList
				indexGetter: #currentClassName
				indexSetter: #currentClassName:
				mainView: self
				menuGetter: #classListMenu
				keystrokeAction: #classListKey:from:.
	classList color: Color white.
	classList _ LayoutMorph newColumn
		color: Color veryLightGray;
		addMorph: (Morph new color: Color transparent) fixedHeight: 4;
		addMorph: (StringMorph new contents: 'Classes') fixedHeight: 16;
		addMorphUseAll: classList.

	upperPanes _ LayoutMorph newRow.
	upperPanes
		addMorph: dirtyFlags proportionalWidth: 0.1;
		addAdjusterAndMorph: changeSetList proportionalWidth: 0.5;
		addAdjusterAndMorph: classList proportionalWidth: 0.4.

	messageList _ PluggableListMorphByItem
				model: model
				listGetter: #messageList
				indexGetter: #currentSelector
				indexSetter: #currentSelector:
				mainView: self
				menuGetter: #messageMenu
				keystrokeAction: #messageListKey:from:.
	messageList color: Color white.
	messageList _ LayoutMorph newColumn
		color: Color veryLightGray;
		addMorph: (Morph new color: Color transparent) fixedHeight: 4;
		addMorph: (StringMorph new contents: 'Methods') fixedHeight: 16;
		addMorphUseAll: messageList.

	self layoutMorph
		addMorph: upperPanes proportionalHeight: 0.25;
		addAdjusterAndMorph: messageList proportionalHeight: 0.25;
		addAdjusterAndMorph: self buildLowerPanes proportionalHeight: 0.5.

	self setLabel: model labelString! !

!classDefinition: #ChangeSorter category: #'Tools-Changes'!
CodeProvider subclass: #ChangeSorter
	instanceVariableNames: 'myChangeSet currentClassName currentSelector priorChangeSetList priorDirtyFlags'
	classVariableNames: 'AllChangeSets'
	poolDictionaries: ''
	category: 'Tools-Changes'!

CodeProvider subclass: #ChangeSorter
	instanceVariableNames: 'myChangeSet currentClassName currentSelector priorChangeSetList priorDirtyFlags'
	classVariableNames: 'AllChangeSets'
	poolDictionaries: ''
	category: 'Tools-Changes'!

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1284-DirtyFlagVisibleInChangeSorter-JuanVuletich-2012May13-22h08m-jmv.6.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1284] on 13 May 2012 at 11:12:09 pm'!
!ChangeSet class methodsFor: 'change set to use' stamp: 'jmv 5/13/2012 23:01'!
                              notInstallOrTestRun

	^Installing isNil or: [
		(Installing beginsWith: 'RunningTest-') and: [ Processor activeProcess name ~= 'TestRunner' ]]
	
	"
	(Installing beginsWith: 'RunningTest-') and: [ Processor activeProcess name = 'TestRunner' ]			-> Test
	(Installing beginsWith: Install-')																		-> Install
	Installing isNil 																						-> Normal
	(Installing beginsWith: 'RunningTest-') and: [ Processor activeProcess name ~= 'TestRunner' ]			-> Normal
	"! !
!ChangeSet class methodsFor: 'change set to use' stamp: 'jmv 5/13/2012 22:46'!
                  runningTest: aTestName do: aBlock

	Installing _ 'RunningTest-', aTestName.
	aBlock ensure: [ Installing _ nil ]! !
!ChangeSet class methodsFor: 'change set to use' stamp: 'jmv 5/13/2012 23:10' prior: 50332247!
             changeSetForBaseSystem

	| csName numberToUse |
	self notInstallOrTestRun
		ifTrue: [
			numberToUse _ self currentBaseCSNumber.
			ChangeSorter allChangeSets
				detect: [ :any | any name initialIntegerOrNil = numberToUse ]
				ifFound: [ :existing | ^existing ]
				ifNone: [
					csName _ (self baseSystemNameFor: numberToUse),
						(String streamContents: [ :strm | DateAndTime now filenamishPrintOn: strm ]).
					^ChangeSorter existingOrNewChangeSetNamed: csName forBaseSystem: true ]]

		ifFalse: [
			csName _ 'Affects-BaseSystem--', Installing.
			^ChangeSorter existingOrNewChangeSetNamed: csName forBaseSystem: false
			"Changes are for the base system, but are not user's own changes..." ]! !
!ChangeSet class methodsFor: 'change set to use' stamp: 'jmv 5/13/2012 23:11' prior: 50332272!
                               changeSetForPackage: aCodePackage

	| csName |
	aCodePackage ifNil: [
		^self changeSetForBaseSystem ].
	csName _ 	self notInstallOrTestRun
		ifTrue: [ 'UnsavedChangesTo-', aCodePackage name ]
		ifFalse: [
			Installing = ('Install-', aCodePackage packageName)
				ifTrue: [ Installing ]
				ifFalse: [ 'Affects-', aCodePackage name, '--', Installing ]].
	^ChangeSorter existingOrNewChangeSetNamed: csName forBaseSystem: false! !
!ChangeSet class methodsFor: 'change set to use' stamp: 'jmv 5/13/2012 22:42' prior: 16801541!
                   installing: aCodePackageOrChangeSetName do: aBlock

	| currentCS currentCSNumber newHighestUpdate |
	Installing _ 'Install-', aCodePackageOrChangeSetName.
	aBlock ensure: [ Installing _ nil ].

	SystemVersion current registerUpdate: aCodePackageOrChangeSetName.
	newHighestUpdate _  SystemVersion current highestUpdate.

	currentCSNumber _ self currentBaseCSNumber.
	currentCS _ self changeSetForBaseSystem.
	currentCS isEmpty ifTrue: [
		ChangeSorter removeChangeSet: currentCS.
		currentCSNumber > newHighestUpdate ifFalse: [
			CurrentBaseCSNumber _ newHighestUpdate + 1 ]]! !
!TestCase methodsFor: 'Running' stamp: 'jmv 5/13/2012 23:05' prior: 16968097!
              run: aResult
	ChangeSet
		runningTest: self printString
		do: [ aResult runCase: self ]
			! !
!TestRunner methodsFor: 'processing' stamp: 'jmv 5/13/2012 22:51' prior: 16968792!
              runSuite: suite
	running ifNotNil: [ ^self inform: 'already running' ].
	suite addDependent: self.
	totalTests _ suite tests size.
	completedTests _ 0.
	runSemaphore initSignals.
	running _ [
            [ result _ suite run ]
	            ensure: [
		            running _ nil.
				suite removeDependent: self.
				runSemaphore signal.
				WorldState addDeferredUIMessage: [
					self updateWindow: result.
			      	self changed: #runTests.
			      	self changed: #runOneTest.
				].
	            ].
     ] newProcess.
	self runWindow.
      self changed: #runTests.
      self changed: #runOneTest.
      running
		name: 'TestRunner';
	      priority: Processor userBackgroundPriority;
	      resume.
! !
!TestRunner methodsFor: 'processing' stamp: 'jmv 5/13/2012 22:51' prior: 50332960!
        runSuiteProfiled: suite
	running ifNotNil: [ ^self inform: 'already running' ].
	suite addDependent: self.
	totalTests _ suite tests size.
	completedTests _ 0.
	runSemaphore initSignals.
	running _ [
            [ result _ MessageTally spyOn: [suite run] ]
	            ensure: [
		            running _ nil.
				suite removeDependent: self.
				runSemaphore signal.
				WorldState addDeferredUIMessage: [
					self updateWindow: result.
			      	self changed: #runTests.
			      	self changed: #runOneTest.
				].
	            ].
     ] newProcess.
	self runWindow.
      self changed: #runTests.
      self changed: #runOneTest.
      running
		name: 'TestRunner';
	      priority: Processor userBackgroundPriority;
	      resume.
! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1285-TestRunnerCreatedCodeInOwnChangeSet-JuanVuletich-2012May13-23h09m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1286] on 15 May 2012 at 11:06:34 am'!
!Morph methodsFor: 'events-processing' stamp: 'jmv 5/15/2012 11:05' prior: 16897419!
     focusKeyboardFor: aKeyboardEvent

	"If aKeyboardEvent ctrl-tab or shift-ctrl-tab use it to navigate keyboard focus.
	Warning: This doesn't work on Windows... the event is not sent"
	(aKeyboardEvent keyValue = 9 and: [ aKeyboardEvent controlKeyPressed and: [ aKeyboardEvent rawMacOptionKeyPressed not ]])
		ifTrue: [
			aKeyboardEvent shiftPressed
				ifTrue: [ aKeyboardEvent hand keyboardFocusPrevious ]
				ifFalse: [ aKeyboardEvent hand keyboardFocusNext ].
			^ true ].
	"On Windows use at least some keystroke to navigate morphs... even shift-Tab that should navigate backwards"
	(aKeyboardEvent keyValue = 9 and: [ aKeyboardEvent shiftPressed and: [ aKeyboardEvent rawMacOptionKeyPressed not ]])
		ifTrue: [
			aKeyboardEvent hand keyboardFocusNext.
			^ true ].

	"Cycle through windows with cmdAlt + < and cmdAlt + >.
	VM and platform peculiarities are hidden in #isCmdAltLessThan and #isCmdAltGreaterThan"
	"This was done as an attempt to mimic the Mac OSX keystrokes for 'Move focus to next window in active application'. Unfortunately, it only works if OS X is set to use any other keys for this. If (as for example, with German defaults), OS-X uses these keystrokes, then they are not sent to the VM. This is a long standing issues in Chromium and PhotoShop, for example..."
	self disableCode: [
		aKeyboardEvent isCmdAltLessThan ifTrue: [
			aKeyboardEvent hand activatePreviousWindow.
			^true ].
		aKeyboardEvent isCmdAltGreaterThan ifTrue: [
			aKeyboardEvent hand activateNextWindow.
			^true ]].
	"Alternative for Mac OS-X: option-Tab and option-shift-Tab"
	(aKeyboardEvent keyValue = 9 and: [ aKeyboardEvent rawMacOptionKeyPressed ])
		ifTrue: [
			aKeyboardEvent shiftPressed
				ifTrue: [ aKeyboardEvent hand activatePreviousWindow ]
				ifFalse: [ aKeyboardEvent hand activateNextWindow ].
			^ true ].
	"Alternative for non-Mac OS-X: alt-< and alt->"
	(aKeyboardEvent commandAltKeyPressed and: [ aKeyboardEvent keyCharacter = $< ]) ifTrue: [
		aKeyboardEvent hand activatePreviousWindow.
		^true ].
	(aKeyboardEvent commandAltKeyPressed and: [ aKeyboardEvent keyCharacter = $> ]) ifTrue: [
		aKeyboardEvent hand activateNextWindow.
		^true ].
	^false! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1286-KeyboardNavigationTweaks-JuanVuletich-2012May15-09h49m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1286] on 15 May 2012 at 10:23:27 pm'!
!SystemDictionary methodsFor: 'code authors' stamp: 'jmv 5/15/2012 18:00'!
                            unknownContributors
	"Answer a collection of authorInitials for whom there is code in the system 
	(either in core or in loaded packages), but we don't knwo their full name.
	Smalltalk unknownContributors
	"

	| all ok |
	all _ Smalltalk allContributors asSet.
	ok _ (Smalltalk contributorInitialsAndNames collect: [ :pair | pair first ]) asSet.
	^(all difference: ok) asArray sort! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1287-UnknownContributors-JuanVuletich-2012May15-22h21m-jmv.1.cs----!

'From Cuis 4.0 of 21 April 2012 [latest update: #1287] on 17 May 2012 at 10:08:11 am'!
!ChangeSet methodsFor: 'change logging' stamp: 'jmv 5/17/2012 09:06'!
      noteRecategorizationOfClass: aClass
	"Remember that a class definition has been changed.  Record the original structure, so that a conversion method can be built."

	aClass wantsChangeSetLogging ifFalse: [^ self].
	self atClass: aClass add: #change.
	self addCoherency: aClass name.
	self hasUnsavedChanges: true! !
!ChangeSet methodsFor: 'method changes' stamp: 'jmv 5/17/2012 09:41' prior: 50331873!
              removeSelectorChanges: selector class: class 
	"Remove all memory of changes associated with the argument, selector, in 
	this class."

	| chgRecord |
	self hasUnsavedChanges: true.	"set the flag in any case"
	(chgRecord _ changeRecords at: class name ifAbsent: [^ self])
		removeSelector: selector.
	chgRecord hasNoChanges ifTrue: [changeRecords removeKey: class name]! !
!ChangeSet methodsFor: 'class changes' stamp: 'jmv 5/17/2012 09:45' prior: 50331887!
                      noteClassForgotten: className
	"Remove from structures if class is not a superclass of some other one we are remembering"

	self hasUnsavedChanges: true.	"set the flag in any case"
	structures ifNil: [^ self].
	Smalltalk at: className ifPresent: [:cls |
		cls subclasses do: [:sub | (structures includesKey: sub) ifTrue: [
			^ self]]].  "No delete"
	structures removeKey: className ifAbsent: nil! !
!ChangeSet methodsFor: 'system change notifications' stamp: 'jmv 5/17/2012 09:04' prior: 50332019!
             classRecategorized: aClass from: oldCategory to: newCategory

	self noteRecategorizationOfClass: aClass! !
!ChangeSet class methodsFor: 'system change notifications' stamp: 'jmv 5/17/2012 09:20' prior: 16801317!
            classRecategorized: aClass from: oldCategory to: newCategory
	"If the class was moved to a dfferent package, out of the base system, record the fact in the change set.
	The actual class redefinition is done at #classDefinitionChangedFrom:to: that is also called (if the class really changed)."

	| oldPackageOrNil newPackageOrNil newChangeSet |
	newPackageOrNil _ CodePackage
		packageOfSystemCategory: newCategory
		ifNone:	nil.
	newPackageOrNil ifNotNil: [ newPackageOrNil hasUnsavedChanges: true ].
	newChangeSet _ ChangeSet changeSetForPackage: newPackageOrNil.
	newChangeSet noteRecategorizationOfClass: aClass.

	oldPackageOrNil _ CodePackage
		packageOfSystemCategory: oldCategory
		ifNone: nil.
	oldPackageOrNil
		ifNotNil: [ oldPackageOrNil hasUnsavedChanges: true ]
		ifNil: [
			"If destination is a package, but source isn't, then record the change in the base system changeset"
			newPackageOrNil ifNotNil: [
				self changeSetForBaseSystem noteClassMoveToOtherPackage: aClass ]]! !
!ChangeSet class methodsFor: 'system change notifications' stamp: 'jmv 5/17/2012 09:43' prior: 16801454!
                   selectorRecategorized: selector from: oldCategory to: newCategory inClass: aClass
	"If the method was moved to a dfferent package, affect the package that lost the it. Tell it that it lost the method.
	The actual method redefinition is done at one of the method definition methods, that is also called."

	| newPackageOrNil newChangeSet oldPackageOrNil |
	newPackageOrNil _ CodePackage
		packageOfMethodCategory: newCategory
		ofClass: aClass
		ifNone:	nil.
	newPackageOrNil ifNotNil: [ newPackageOrNil hasUnsavedChanges: true ].
	newChangeSet _ ChangeSet changeSetForPackage: newPackageOrNil.
	newChangeSet selectorRecategorized: selector from: oldCategory to: newCategory inClass: aClass.

	oldPackageOrNil _ CodePackage
		packageOfMethodCategory: oldCategory
		ofClass: aClass
		ifNone: nil.
	oldPackageOrNil
		ifNotNil: [ oldPackageOrNil hasUnsavedChanges: true ]
		ifNil: [
			"If destination is a package, but source isn't, then record the change in the base system changeset"
			newPackageOrNil ifNotNil: [
				self changeSetForBaseSystem noteMethodMoveToOtherPackage: selector forClass: aClass ]]! !
!CodePackage class methodsFor: 'packages access' stamp: 'jmv 5/17/2012 10:03' prior: 50332055!
             register: aCodePackage
	"
	Usually call #named:createIfAbsent:registerIfNew: instead
	CodePackage register: (CodePackage newNamed: 'Tests-Files')
	"
	| any base |
	InstalledPackages at: aCodePackage packageName put: aCodePackage.

	"Anything that now belongs in this package, was moved out of the base system!!"
	base _ ChangeSet changeSetForBaseSystem.
	any _ false.
	aCodePackage classes do: [ :cls |
		any _ true.
		base noteClassMoveToOtherPackage: cls ].
	aCodePackage extensionMethods do: [ :methodReference |
		methodReference isValid ifTrue: [
			any _ true.
			base
				noteMethodMoveToOtherPackage: methodReference selector
				forClass: methodReference actualClass ]].
	any ifTrue: [
		aCodePackage hasUnsavedChanges: true ].

	self triggerEvent: #installedPackagesChanged! !

----End fileIn of /Volumes/CANON_DC/Cuis/CuisUpdates/1288-PackageAndChangeSetFixes-JuanVuletich-2012May17-10h06m-jmv.1.cs----!

----SNAPSHOT----#(17 May 2012 9:39:30 pm) Cuis4.0-1288.image priorSource: 434!

----QUIT/NOSAVE----#(17 May 2012 9:39:45 pm) Cuis4.0-1288.image priorSource: 114034!